name: CI Pipeline
on: [push, pull_request]

jobs:
  cmake-linux:
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        build-type: [Release]
        cxx-std: [11, 14, 17, 20]
        generator: [Ninja]
        image: [ubuntu-20.04, ubuntu-22.04]
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install cmake libwebkit2gtk-4.0-dev ninja-build xvfb -y
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          build-type: ${{ matrix.build-type }}
          cxx-std: ${{ matrix.cxx-std }}
          generator: ${{ matrix.generator }}
          install-wrapper-cmd: sudo
          test-wrapper-cmd: xvfb-run
      - uses: actions/upload-artifact@v3
        if: matrix.build-type == 'Release' && matrix.cxx-std == 20 && matrix.generator == 'Ninja'
        with:
          name: ${{ github.job }}_${{ matrix.image }}_${{ matrix.generator }}_cxx${{ matrix.cxx-std }}_${{ matrix.build-type }}
          path: |
            build/*.gz
            build/*.zip
          retention-days: 1

  cmake-linux-mingw-w64:
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        build-type: [Release]
        cxx-std: [14, 17, 20]
        generator: [Ninja]
        image: [ubuntu-20.04, ubuntu-22.04]
        exclude:
          - cxx-std: 20
            image: ubuntu-20.04
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install cmake mingw-w64 ninja-build -y
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          build-type: ${{ matrix.build-type }}
          cxx-std: ${{ matrix.cxx-std }}
          generator: ${{ matrix.generator }}
          test: false
          install: false
          toolchain-file: x86_64-w64-mingw32
      - uses: actions/upload-artifact@v3
        if: matrix.build-type == 'Release' && matrix.cxx-std == 20 && matrix.generator == 'Ninja' && matrix.image == 'ubuntu-22.04'
        with:
          name: ${{ github.job }}_${{ matrix.image }}_${{ matrix.generator }}_cxx${{ matrix.cxx-std }}_${{ matrix.build-type }}
          path: |
            build/*.gz
            build/*.zip
          retention-days: 1

  cmake-macos:
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        build-type: [Release]
        cxx-std: [11, 14, 17, 20]
        generator: [Xcode]
        image: [macos-11, macos-12]
        architectures: [arm64, x86_64, arm64;x86_64]
        include:
          - architectures: arm64
            test: false
    steps:
      - name: Install dependencies
        run: brew install cmake ninja
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          build-type: ${{ matrix.build-type }}
          cxx-std: ${{ matrix.cxx-std }}
          install-wrapper-cmd: sudo
          generator: ${{ matrix.generator }}
          macos-architectures: ${{ matrix.architectures }}
          test: ${{ matrix.test }}
      - uses: actions/upload-artifact@v3
        if: matrix.build-type == 'Release' && matrix.cxx-std == 20 && matrix.generator == 'Xcode' && matrix.architectures == 'arm64;x86_64' && matrix.image == 'macos-12'
        with:
          name: ${{ github.job }}_${{ matrix.image }}_${{ matrix.generator }}_cxx${{ matrix.cxx-std }}_${{ matrix.build-type }}_${{ matrix.architectures }}
          path: |
            build/*.gz
            build/*.zip
          retention-days: 1

  cmake-windows-msys2:
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        build-type: [Release]
        cxx-std: [11, 14, 17, 20]
        msystem: [clang64, mingw64, ucrt64]
        generator: [Ninja]
        image: [windows-2022]
    steps:
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: false
          pacboy: toolchain:p cmake:p ninja:p
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          build-type: ${{ matrix.build-type }}
          cxx-std: ${{ matrix.cxx-std }}
          generator: ${{ matrix.generator }}
          shell: msys2 {0}
      - uses: actions/upload-artifact@v3
        if: matrix.build-type == 'Release' && matrix.cxx-std == 20 && matrix.generator == 'Ninja' && matrix.image == 'windows-2022'
        with:
          name: ${{ github.job }}_${{ matrix.image }}_${{ matrix.generator }}_cxx${{ matrix.cxx-std }}_${{ matrix.build-type }}_${{ matrix.msystem }}
          path: |
            build/*.gz
            build/*.zip
          retention-days: 1

  cmake-windows-msvc:
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        cxx-std: [14, 17, 20]
        generator-platform: [ARM64, x64, Win32]
        image: [windows-2022]
        include:
          - image: windows-2022
            generator: Visual Studio 17 2022
          - generator-platform: ARM64
            test: false
          - generator: Visual Studio 17 2022
            generator-short-name: vs17
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          build-type: Debug
          cxx-std: ${{ matrix.cxx-std }}
          generator: ${{ matrix.generator }}
          generator-platform: ${{ matrix.generator-platform }}
          configure: true
          test: ${{ matrix.test }}
          install: false
      - uses: ./.github/workflows/cmake
        with:
          build-type: Release
          cxx-std: ${{ matrix.cxx-std }}
          generator: ${{ matrix.generator }}
          generator-platform: ${{ matrix.generator-platform }}
          configure: false
          test: ${{ matrix.test }}
          install: true
          cpack-configs: Debug;Release
      - uses: actions/upload-artifact@v3
        if: matrix.cxx-std == 20 && matrix.generator == 'Visual Studio 17 2022' && matrix.image == 'windows-2022'
        with:
          name: ${{ github.job }}_${{ matrix.image }}_${{ matrix.generator-short-name }}_cxx${{ matrix.cxx-std }}_${{ matrix.generator-platform }}
          path: |
            build/*.gz
            build/*.zip
          retention-days: 1

  swig:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        language: [csharp, java, python, ruby]
    steps:
      - uses: actions/checkout@v3
      - name: Generate bindings with SWIG
        run: |
          mkdir -p "build/bindings/${{ matrix.language }}" \
            && swig -Wall -Werror -c++ "-${{ matrix.language }}" \
              -outdir "build/bindings/${{ matrix.language }}" \
              -o build/bindings/${{ matrix.language }}/${{ matrix.language }}_wrap.cpp \
              webview.i

  clang-format:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format
        uses: DoozyX/clang-format-lint-action@v0.6
        with:
          source: '.'
          exclude: './script'
          extensions: 'h,cc'
          clangFormatVersion: 9
          style: file
