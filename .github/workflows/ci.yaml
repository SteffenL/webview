name: CI Pipeline
on: [push, pull_request]

jobs:
  library:
    name: build (${{ matrix.config.os }}, ${{ matrix.config.arch }}, ${{ matrix.config.compiler.id }}, ${{ matrix.config.runtime-link }}-rt)
    runs-on: ${{ matrix.config.image }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: linux,   image: ubuntu-latest,  compiler: { id: gcc,   ar: ar,  cc: gcc,   cxx: g++,     ld: ld,   toolchain: ''    }, arch: x64,   test-cmd: xvfb-run, run-tests: true , load-toolchain-param: ''                     , runtime-link: 'shared' }
          - { os: linux,   image: ubuntu-latest,  compiler: { id: clang, ar: ar,  cc: clang, cxx: clang++, ld: ld,   toolchain: ''    }, arch: x64,   test-cmd: xvfb-run, run-tests: true , load-toolchain-param: ''                     , runtime-link: 'shared' }
          - { os: macos,   image: macos-latest,   compiler: { id: clang, ar: ar,  cc: clang, cxx: clang++, ld: ld,   toolchain: ''    }, arch: arm64, test-cmd: ''      , run-tests: false, load-toolchain-param: ''                     , runtime-link: 'shared' }
          - { os: macos,   image: macos-latest,   compiler: { id: clang, ar: ar,  cc: clang, cxx: clang++, ld: ld,   toolchain: ''    }, arch: x64,   test-cmd: ''      , run-tests: true , load-toolchain-param: ''                     , runtime-link: 'shared' }
          - { os: windows, image: windows-latest, compiler: { id: msvc,  ar: lib, cc: cl,    cxx: cl,      ld: link, toolchain: msvc  }, arch: arm64, test-cmd: ''      , run-tests: false, load-toolchain-param: '--load-toolchain=msvc', runtime-link: 'shared' }
          - { os: windows, image: windows-latest, compiler: { id: msvc,  ar: lib, cc: cl,    cxx: cl,      ld: link, toolchain: msvc  }, arch: arm64, test-cmd: ''      , run-tests: false, load-toolchain-param: '--load-toolchain=msvc', runtime-link: 'static' }
          - { os: windows, image: windows-latest, compiler: { id: msvc,  ar: lib, cc: cl,    cxx: cl,      ld: link, toolchain: msvc  }, arch: x64,   test-cmd: ''      , run-tests: true , load-toolchain-param: '--load-toolchain=msvc', runtime-link: 'shared' }
          - { os: windows, image: windows-latest, compiler: { id: msvc,  ar: lib, cc: cl,    cxx: cl,      ld: link, toolchain: msvc  }, arch: x64,   test-cmd: ''      , run-tests: true , load-toolchain-param: '--load-toolchain=msvc', runtime-link: 'static' }
          - { os: windows, image: windows-latest, compiler: { id: msvc,  ar: lib, cc: cl,    cxx: cl,      ld: link, toolchain: msvc  }, arch: x86,   test-cmd: ''      , run-tests: true , load-toolchain-param: '--load-toolchain=msvc', runtime-link: 'shared' }
          - { os: windows, image: windows-latest, compiler: { id: msvc,  ar: lib, cc: cl,    cxx: cl,      ld: link, toolchain: msvc  }, arch: x86,   test-cmd: ''      , run-tests: true , load-toolchain-param: '--load-toolchain=msvc', runtime-link: 'static' }
          - { os: windows, image: windows-latest, compiler: { id: gcc,   ar: ar,  cc: gcc,   cxx: g++,     ld: ld,   toolchain: mingw }, arch: x64,   test-cmd: ''      , run-tests: true , load-toolchain-param: ''                     , runtime-link: 'shared' }
          - { os: windows, image: windows-latest, compiler: { id: gcc,   ar: ar,  cc: gcc,   cxx: g++,     ld: ld,   toolchain: mingw }, arch: x86,   test-cmd: ''      , run-tests: true , load-toolchain-param: ''                     , runtime-link: 'shared' }
          - { os: windows, image: windows-latest, compiler: { id: clang, ar: ar,  cc: clang, cxx: clang++, ld: ld,   toolchain: mingw }, arch: x64,   test-cmd: ''      , run-tests: true , load-toolchain-param: ''                     , runtime-link: 'shared' }
          - { os: windows, image: windows-latest, compiler: { id: clang, ar: ar,  cc: clang, cxx: clang++, ld: ld,   toolchain: mingw }, arch: x86,   test-cmd: ''      , run-tests: true , load-toolchain-param: ''                     , runtime-link: 'shared' }
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies (linux)
        if: matrix.config.os == 'linux'
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y xvfb libwebkit2gtk-4.0-dev

      - name: Set up MinGW-w64 (windows)
        if: matrix.config.os == 'windows' && matrix.config.compiler.toolchain == 'mingw'
        uses: ./.github/actions/setup-mingw

      - name: Build
        run: >
          python3 script/build.py
          ${{ matrix.config.load-toolchain-param }}
          "--ar=${{ matrix.config.compiler.ar }}"
          "--cc=${{ matrix.config.compiler.cc }}"
          "--cxx=${{ matrix.config.compiler.cxx }}"
          "--ld=${{ matrix.config.compiler.ld }}"
          "--target-arch=${{ matrix.config.arch }}"
          "--runtime-link=${{ matrix.config.runtime-link }}"
          --build

      - name: Upload artifacts (bin)
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.compiler.id }}-bin-${{ matrix.config.runtime-link }}-runtime
          path: build/${{ matrix.config.arch }}/bin
          retention-days: 1

      - name: Upload artifacts (lib)
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.compiler.id }}-lib-${{ matrix.config.runtime-link }}-runtime
          path: build/${{ matrix.config.arch }}/lib
          retention-days: 1

      - name: Test
        if: matrix.config.run-tests
        run: ${{ matrix.config.test-cmd }} python3 script/build.py "--target-arch=${{ matrix.config.arch }}" --build-tests=false --test

  go:
    name: go (${{ matrix.config.os }}, ${{ matrix.config.arch }})
    runs-on: ${{ matrix.config.image }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: linux,   image: ubuntu-latest,  arch: x64,   run-tests: true , test-cmd: xvfb-run }
          - { os: macos,   image: macos-latest,   arch: x64,   run-tests: true , test-cmd: ''       }
          - { os: windows, image: windows-latest, arch: x64,   run-tests: true , test-cmd: ''       }
          - { os: windows, image: windows-latest, arch: x86,   run-tests: true , test-cmd: ''       }
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies (linux)
        if: matrix.config.os == 'linux'
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y xvfb libwebkit2gtk-4.0-dev

      - name: Set up MinGW-w64 (windows)
        if: matrix.config.os == 'windows'
        uses: ./.github/actions/setup-mingw
        with:
          arch: ${{ matrix.config.arch }}

      - uses: actions/setup-go@v3
        with:
          go-version: '1.13'

      - name: Build
        run: python3 script/build.py "--target-arch=${{ matrix.config.arch }}" --go-build

      - name: Test
        run: ${{ matrix.config.test-cmd }} python3 script/build.py "--target-arch=${{ matrix.config.arch }}" --go-build=false --go-test

  swig:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [csharp, java, python, ruby]
    steps:
      - uses: actions/checkout@v1
      - name: Generate bindings with SWIG
        run: |
          mkdir -p "build/bindings/${{ matrix.language }}" \
            && swig -Wall -Werror -c++ "-${{ matrix.language }}" \
              -outdir "build/bindings/${{ matrix.language }}" \
              -o build/bindings/${{ matrix.language }}/${{ matrix.language }}_wrap.cpp \
              webview.i

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format
        uses: DoozyX/clang-format-lint-action@v0.6
        with:
          source: '.'
          exclude: './script'
          extensions: 'h,cc'
          clangFormatVersion: 9
          style: file
