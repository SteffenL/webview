name: CI Pipeline
on: [push, pull_request]

jobs:
  lint:
    name: lint (${{ matrix.os }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        # macOS was excluded because clang-tidy is not installed.
        include:
          - os: linux
            image: ubuntu-latest
            arch: x64
          - os: windows
            image: windows-latest
            arch: x64
          - os: windows
            image: windows-latest
            arch: x86
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install libwebkit2gtk-4.0-dev xvfb -y
      - name: Run lint checks
        if: runner.os == 'Windows'
        run: script\build.bat --lint=lax "--target-arch=${{ matrix.arch }}"
        shell: cmd
      - name: Run lint checks
        if: runner.os != 'Windows'
        run: script/build.sh --lint=lax "--target-arch=${{ matrix.arch }}"

  build-linux:
    name: build (linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install libwebkit2gtk-4.0-dev xvfb -y
      - name: Build and run tests
        run: xvfb-run ./script/build.sh --build-examples --test --go-test

  build-macos:
    name: build (macos)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build and run tests
        run: ./script/build.sh --build-examples --test --go-test

  build-windows:
    name: build (windows, ${{ matrix.arch }}, ${{ matrix.compiler.id }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x64]
        compiler:
          - { id: msvc, toolchain: msvc, cc: unused, cxx: unused }
          - { id: mingw-gcc, toolchain: mingw, cc: gcc, cxx: g++ }
          - { id: mingw-clang, toolchain: mingw, cc: clang, cxx: clang++ }
        include:
          - arch: x64
            compiler: { toolchain: mingw }
            mingw_url: https://github.com/brechtsanders/winlibs_mingw/releases/download/12.2.0-14.0.6-10.0.0-msvcrt-r2/winlibs-x86_64-posix-seh-gcc-12.2.0-llvm-14.0.6-mingw-w64msvcrt-10.0.0-r2.zip
            mingw_hash: 290fc7b0d531eb4ea54640007f3e20b360580b6d2189d08d39907cb9a3df114a
          - arch: x86
            compiler: { toolchain: mingw }
            mingw_url: https://github.com/brechtsanders/winlibs_mingw/releases/download/12.2.0-14.0.6-10.0.0-msvcrt-r2/winlibs-i686-posix-dwarf-gcc-12.2.0-llvm-14.0.6-mingw-w64msvcrt-10.0.0-r2.zip
            mingw_hash: 187b68dd034a74a951b110f7d0253a3667cf191a4fb2e79bcacf856ae09aa75e
    steps:
      - uses: actions/checkout@v3
      # Replace the existing MinGW-w64 installation so that we have more control over the versions
      # we use, and this also allows us to have 64-bit and 32-bit versions side by side.
      # The MinGW-w64 distribution from https://winlibs.com/ is known to have good compatibility
      # with the webview library.
      # Distribution: GCC 12.2.0 + MinGW-w64 10.0.0 (MSVCRT) - release 2
      # The MSVCRT runtime was chosen over UCRT because MSVCRT is available on old versions of Windows
      # while UCRT has only been shipped with Windows since Windows 10.
      - name: Uninstall MinGW-w64
        if: matrix.compiler.toolchain == 'mingw'
        run: choco uninstall mingw
      - name: Install MinGW-w64
        if: matrix.compiler.toolchain == 'mingw'
        run: |
          $ProgressPreference = "SilentlyContinue"
          $temp_dir = [System.IO.Path]::GetTempPath()
          $zip_path = Join-Path $temp_dir ([System.IO.Path]::GetRandomFileName() + ".zip")
          Invoke-WebRequest -Uri "${{ matrix.mingw_url }}" -OutFile $zip_path
          Expand-Archive -LiteralPath $zip_path -DestinationPath "${env:SystemDrive}\"
      - name: Build and run tests
        run: script\build.bat "--target-arch=${{ matrix.arch }}" "--toolchain=${{ matrix.compiler.toolchain }}" "--cc=${{ matrix.compiler.cc }}" "--cxx=${{ matrix.compiler.cxx }}" --build-examples --test
        shell: cmd
      - name: Run Go tests
        if: matrix.compiler.toolchain == 'mingw'
        run: script\build.bat "--target-arch=${{ matrix.arch }}" "--cc=${{ matrix.compiler.cc }}" "--cxx=${{ matrix.compiler.cxx }}" --build=false --go-test
        shell: cmd

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format
        uses: DoozyX/clang-format-lint-action@v0.6
        with:
          source: '.'
          exclude: './script'
          extensions: 'h,cc'
          clangFormatVersion: 9
          style: file
