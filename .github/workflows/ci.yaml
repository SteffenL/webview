name: CI Pipeline
on: [push, pull_request]

jobs:
  experiment:
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows, image: windows-2022, arch: x64  , compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: OFF, build-type: Release, test: true , deliver: true , multiconfig: true }
        include:
          #- config: { os: linux }
          #  test-cmd: xvfb-run
          - config: { os: windows }
            toolchain: mingw
          - config: { os: windows, compiler: { id: msvc } }
            toolchain: msvc
          - config: { multiconfig: false }
            cmake-generator: Ninja
          - config: { multiconfig: true }
            cmake-generator: Ninja Multi-Config
    runs-on: ubuntu-22.04
    steps:
      - run: echo "${{ matrix.config.os }}, ${{ matrix.config.image }}, ${{ matrix.cmake-generator }}, ${{ matrix.config.multiconfig }}"

  build:
    needs: experiment
    strategy:
      fail-fast: false
      matrix:
        config:
          #- { os: linux  , image: ubuntu-22.04, arch: x64  , compiler: { id: clang, version: '15'   }, binaries: { cc: 'clang-15', cxx: 'clang++-15' }, static-runtime: OFF, build-type: Release, test: true , deliver: false, multiconfig: false }
          #- { os: linux  , image: ubuntu-22.04, arch: x64  , compiler: { id: clang, version: '11'   }, binaries: { cc: 'clang-11', cxx: 'clang++-11' }, static-runtime: OFF, build-type: Release, test: true , deliver: false, multiconfig: false }
          #- { os: linux  , image: ubuntu-22.04, arch: x64  , compiler: { id: gcc  , version: '12'   }, binaries: { cc: 'gcc-12'  , cxx: 'g++-12'     }, static-runtime: OFF, build-type: Release, test: true , deliver: false, multiconfig: false }
          #- { os: linux  , image: ubuntu-22.04, arch: x64  , compiler: { id: gcc  , version: '9'    }, binaries: { cc: 'gcc-9'   , cxx: 'g++-9'      }, static-runtime: OFF, build-type: Release, test: true , deliver: false, multiconfig: false }
          #- { os: macos  , image: macos-12    , arch: arm64, compiler: { id: clang, version: ''     }, binaries: { cc: 'clang'   , cxx: 'clang++'    }, static-runtime: OFF, build-type: Release, test: false, deliver: true , multiconfig: false }
          #- { os: macos  , image: macos-12    , arch: x64  , compiler: { id: clang, version: ''     }, binaries: { cc: 'clang'   , cxx: 'clang++'    }, static-runtime: OFF, build-type: Release, test: true , deliver: true , multiconfig: false }
          #- { os: windows, image: windows-2022, arch: x64  , compiler: { id: clang, version: ''     }, binaries: { cc: 'clang'   , cxx: 'clang++'    }, static-runtime: ON , build-type: Release, test: true , deliver: false, multiconfig: false }
          #- { os: windows, image: windows-2022, arch: x64  , compiler: { id: gcc  , version: '14.3' }, binaries: { cc: 'gcc'     , cxx: 'g++'        }, static-runtime: ON , build-type: Release, test: true , deliver: false, multiconfig: false }
          #- { os: windows, image: windows-2022, arch: arm64, compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: OFF, build-type: Debug  , test: false, deliver: true , multiconfig: true }
          #- { os: windows, image: windows-2022, arch: arm64, compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: OFF, build-type: Release, test: false, deliver: true , multiconfig: true }
          #- { os: windows, image: windows-2022, arch: arm64, compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: ON , build-type: Debug  , test: false, deliver: true , multiconfig: true }
          #- { os: windows, image: windows-2022, arch: arm64, compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: ON , build-type: Release, test: false, deliver: true , multiconfig: true }
          #- { os: windows, image: windows-2022, arch: x64  , compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: OFF, build-type: Debug  , test: true , deliver: true , multiconfig: true }
          - { os: windows, image: windows-2022, arch: x64  , compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: OFF, build-type: Release, test: true , deliver: true , multiconfig: true }
          #- { os: windows, image: windows-2022, arch: x64  , compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: ON , build-type: Debug  , test: true , deliver: true , multiconfig: true }
          #- { os: windows, image: windows-2022, arch: x64  , compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: ON , build-type: Release, test: true , deliver: true , multiconfig: true }
          #- { os: windows, image: windows-2022, arch: x86  , compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: OFF, build-type: Debug  , test: true , deliver: true , multiconfig: true }
          #- { os: windows, image: windows-2022, arch: x86  , compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: OFF, build-type: Release, test: true , deliver: true , multiconfig: true }
          #- { os: windows, image: windows-2022, arch: x86  , compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: ON , build-type: Debug  , test: true , deliver: true , multiconfig: true }
          #- { os: windows, image: windows-2022, arch: x86  , compiler: { id: msvc , version: '14.3' }, binaries: { cc: 'cl'      , cxx: 'cl'         }, static-runtime: ON , build-type: Release, test: true , deliver: true , multiconfig: true }
        include:
          #- config: { os: linux }
          #  test-cmd: xvfb-run
          - config: { os: windows }
            toolchain: mingw
          - config: { os: windows, compiler: { id: msvc } }
            toolchain: msvc
          - config: { multiconfig: false }
            cmake-generator: Ninja
          - config: { multiconfig: true }
            cmake-generator: Ninja Multi-Config
    runs-on: ${{ matrix.config.image }}
    name: library (${{ matrix.config.image }}, ${{ matrix.config.compiler.id }}${{ matrix.config.compiler.version }} ${{ matrix.config.runtime-link }}-rt, ${{ matrix.config.build-type }})
    steps:
      - run: |
          echo "matrix.config.compiler.id: ${{ matrix.config.compiler.id }}"
          echo "matrix.config.compiler.version: ${{ matrix.config.compiler.version }}"
          echo "matrix.toolchain: ${{ matrix.toolchain }}"
      - uses: actions/checkout@v3
      - name: Linux preparation
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libgtk-3-dev libwebkit2gtk-4.0-dev xvfb ninja-build -y
          if [ "${{ matrix.config.compiler.id }}" = "gcc" ]; then
            sudo apt-get install "gcc-${{ matrix.config.compiler.version }}" "g++-${{ matrix.config.compiler.version }}" -y
          elif [ "${{ matrix.config.compiler.id }}" = "clang" ]; then
            sudo apt-get install "clang-${{ matrix.config.compiler.version }}" "clang++-${{ matrix.config.compiler.version }}" -y
          fi
      - name: macOS preparation
        if: runner.os == 'macOS'
        run: brew install ninja
      - name: Windows preparation
        if: runner.os == 'Windows'
        run: |
          echo Installing Ninja
          choco install ninja --version=1.10.2
          if "${{ matrix.toolchain }}" == "mingw" (
            call :configure_mingw
          ) else if "${{ matrix.toolchain }}" == "msvc" (
            call :configure_msvc
          )
          echo Installing WebView2 Runtime
          curl -sSLo "%TEMP%\MicrosoftEdgeWebview2Setup.exe" https://go.microsoft.com/fwlink/p/?LinkId=2124703
          "%TEMP%\MicrosoftEdgeWebview2Setup.exe" /silent /install
          goto :eof
          :configure_mingw
            echo Adding MinGW-w64 to PATH
            echo PATH=%ProgramData%\chocolatey\lib\mingw\tools\install\mingw64\bin;%PATH%>>%GITHUB_ENV%
            goto :eof
          :configure_msvc
            echo Configuring MSVC toolset
            set "msvc_arch=${{ matrix.config.arch }}"
            if "%msvc_arch%" == "arm64" set msvc_arch=amd64_arm64
            if "%msvc_arch%" == "x64" set msvc_arch=amd64
            if "%msvc_arch%" == "x86" set msvc_arch=amd64_x86
            set "vcvarsall_path_x64=%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"
            set "vcvarsall_path_x86=%ProgramFiles(x86)%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"
            if exist "%vcvarsall_path_x64%" (set "vcvarsall_path=%vcvarsall_path_x64%") else (set "vcvarsall_path=%vcvarsall_path_x86%")
            call "%vcvarsall_path%" %msvc_arch% -vcvars_ver=${{ matrix.config.compiler.version }}
            for /F "usebackq tokens=1,2 delims==" %%a in (`set`) do echo %%a=%%b>>%GITHUB_ENV%
            goto :eof
        shell: cmd
      - name: Set compiler environment variables
        run: |
          echo "CC=${{ matrix.config.binaries.cc }}" >> ${GITHUB_ENV}
          echo "CXX=${{ matrix.config.binaries.cxx }}" >> ${GITHUB_ENV}
        shell: bash
      - name: Configure build
        run: |
          extra_args=()
          if [[ "${{ matrix.multiconfig }}" = "true" ]];
            extra_args+=("-DCMAKE_BUILD_TYPE=${{ matrix.build-type }}")
          fi
          cmake -G "${{ matrix.cmake-generator }}" -B build -S . "-DWEBVIEW_USE_STATIC_RUNTIME=${{ matrix.static-runtime }}" "${extra_args[@]}"
        shell: bash
      - name: Build
        if: matrix.multiconfig != 'true'
        run: cmake --build build
      - name: Build (debug)
        if: matrix.multiconfig == 'true'
        run: cmake --build build --config Debug
      - name: Build (release)
        if: matrix.multiconfig == 'true'
        run: cmake --build build --config Release
      - name: Run tests
        if: matrix.test == 'true'
        run: ${{ matrix.test-cmd }} ctest --test-dir build/test --output-on-failure --config Release

  swig:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [csharp, java, python, ruby]
    steps:
      - uses: actions/checkout@v1
      - name: Generate bindings with SWIG
        run: |
          mkdir -p "build/bindings/${{ matrix.language }}" \
            && swig -Wall -Werror -c++ "-${{ matrix.language }}" \
              -outdir "build/bindings/${{ matrix.language }}" \
              -o build/bindings/${{ matrix.language }}/${{ matrix.language }}_wrap.cpp \
              webview.i

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Run clang-format
        uses: DoozyX/clang-format-lint-action@v0.6
        with:
          source: '.'
          exclude: './script'
          extensions: 'h,cc'
          clangFormatVersion: 9
          style: file
