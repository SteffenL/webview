name: CI Pipeline
on: [push, pull_request]

jobs:
  build:
    name: build (${{ matrix.config.os }}, ${{ matrix.config.arch }}, ${{ matrix.config.compiler.id }})
    runs-on: ${{ matrix.config.image }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: linux,   image: ubuntu-latest,  compiler: { id: gcc,   ar: ar,  cc: gcc,   cxx: g++,     ld: ld,   toolchain: ''    }, arch: x64,   test-cmd: xvfb-run, run-tests: true , load-toolchain-param: ''                      }
          - { os: linux,   image: ubuntu-latest,  compiler: { id: clang, ar: ar,  cc: clang, cxx: clang++, ld: ld,   toolchain: ''    }, arch: x64,   test-cmd: xvfb-run, run-tests: true , load-toolchain-param: ''                      }
          - { os: macos,   image: macos-latest,   compiler: { id: clang, ar: ar,  cc: clang, cxx: clang++, ld: ld,   toolchain: ''    }, arch: arm64, test-cmd: ''      , run-tests: false, load-toolchain-param: ''                      }
          - { os: macos,   image: macos-latest,   compiler: { id: clang, ar: ar,  cc: clang, cxx: clang++, ld: ld,   toolchain: ''    }, arch: x64,   test-cmd: ''      , run-tests: true , load-toolchain-param: ''                      }
          - { os: windows, image: windows-latest, compiler: { id: msvc,  ar: lib, cc: cl,    cxx: cl,      ld: link, toolchain: msvc  }, arch: arm64, test-cmd: ''      , run-tests: false, load-toolchain-param: '--load-toolchain=msvc' }
          - { os: windows, image: windows-latest, compiler: { id: msvc,  ar: lib, cc: cl,    cxx: cl,      ld: link, toolchain: msvc  }, arch: x64,   test-cmd: ''      , run-tests: true , load-toolchain-param: '--load-toolchain=msvc' }
          - { os: windows, image: windows-latest, compiler: { id: msvc,  ar: lib, cc: cl,    cxx: cl,      ld: link, toolchain: msvc  }, arch: x86,   test-cmd: ''      , run-tests: true , load-toolchain-param: '--load-toolchain=msvc' }
          - { os: windows, image: windows-latest, compiler: { id: gcc,   ar: ar,  cc: gcc,   cxx: g++,     ld: ld,   toolchain: mingw }, arch: x64,   test-cmd: ''      , run-tests: true , load-toolchain-param: ''                      }
          - { os: windows, image: windows-latest, compiler: { id: clang, ar: ar,  cc: clang, cxx: clang++, ld: ld,   toolchain: mingw }, arch: x64,   test-cmd: ''      , run-tests: true , load-toolchain-param: ''                      }
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies (linux)
        if: matrix.config.os == 'linux'
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y xvfb libwebkit2gtk-4.0-dev

      # The MinGW-w64 distribution from https://winlibs.com/ is known to have good compatibility
      # with the webview library.
      # The MSVCRT runtime was chosen over UCRT because MSVCRT is available on old versions of Windows
      # while UCRT has only been shipped with Windows since Windows 10.
      - name: Install MinGW-w64 (windows)
        if: matrix.config.os == 'windows' && matrix.config.compiler.toolchain == 'mingw'
        run: |
          $ProgressPreference = "SilentlyContinue"
          $mingw_urls = @{
            x64 = "https://github.com/brechtsanders/winlibs_mingw/releases/download/12.2.0-15.0.6-10.0.0-msvcrt-r3/winlibs-x86_64-posix-seh-gcc-12.2.0-llvm-15.0.6-mingw-w64msvcrt-10.0.0-r3.zip";
            x86 = "https://github.com/brechtsanders/winlibs_mingw/releases/download/12.2.0-15.0.6-10.0.0-msvcrt-r3/winlibs-i686-posix-dwarf-gcc-12.2.0-llvm-15.0.6-mingw-w64msvcrt-10.0.0-r3.zip"
          }
          # sha256
          $mingw_hashes = @{
            x64 = "183a0f121c63e807d3431abe1ebb701ca91ced10289ef6b59938649239732b45";
            x86 = "917b496a2871b7d3d6202d81db6e929384874f1018b1f394013f91a3a6a9ff2d"
          }
          $arch = "${{ matrix.config.arch }}"
          $temp_dir = [System.IO.Path]::GetTempPath()
          $zip_path = Join-Path $temp_dir ([System.IO.Path]::GetRandomFileName() + ".zip")
          Invoke-WebRequest -Uri $mingw_urls[$arch] -OutFile $zip_path
          $expected_hash = $mingw_hashes[$arch]
          $real_hash = (Get-FileHash -Path $zip_path -Algorithm SHA256).Hash
          if (-not $expected_hash -ieq $real_hash) {
            throw "Expected hash of file `"$zip_path`" to be $expected_hash but it was $real_hash."
          }
          Expand-Archive -LiteralPath $zip_path -DestinationPath "${env:SystemDrive}\"
          Write-Output "PATH=${env:SystemDrive}\mingw32\bin;${env:PATH}" | Out-File -FilePath $env:GITHUB_ENV -Encoding UTF8 -Append
          Write-Output "PATH=${env:SystemDrive}\mingw64\bin;${env:PATH}" | Out-File -FilePath $env:GITHUB_ENV -Encoding UTF8 -Append

      - name: Build
        run: python3 script/build.py ${{ matrix.config.load-toolchain-param }} "--ar=${{ matrix.config.compiler.ar }}" "--cc=${{ matrix.config.compiler.cc }}" "--cxx=${{ matrix.config.compiler.cxx }}" "--ld=${{ matrix.config.compiler.ld }}" "--target-arch=${{ matrix.config.arch }}" --build

      - name: Upload artifacts (bin)
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.compiler.id }}-bin
          path: build/${{ matrix.config.arch }}/bin
          retention-days: 1

      - name: Upload artifacts (lib)
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.compiler.id }}-lib
          path: build/${{ matrix.config.arch }}/lib
          retention-days: 1

      - name: Test
        if: matrix.config.run-tests
        run: ${{ matrix.config.test-cmd }} python3 script/build.py "--target-arch=${{ matrix.config.arch }}" --build-tests=false --test

  swig:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [csharp, java, python, ruby]
    steps:
      - uses: actions/checkout@v1
      - name: Generate bindings with SWIG
        run: |
          mkdir -p "build/bindings/${{ matrix.language }}" \
            && swig -Wall -Werror -c++ "-${{ matrix.language }}" \
              -outdir "build/bindings/${{ matrix.language }}" \
              -o build/bindings/${{ matrix.language }}/${{ matrix.language }}_wrap.cpp \
              webview.i

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format
        uses: DoozyX/clang-format-lint-action@v0.6
        with:
          source: '.'
          exclude: './script'
          extensions: 'h,cc'
          clangFormatVersion: 9
          style: file
