name: CMake
on: [push, pull_request]
jobs:

#
# Phase 1
#

  p1-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format
        uses: DoozyX/clang-format-lint-action@v0.18.1
        with:
          source: '.'
          exclude: './build'
          extensions: 'h,cc'
          clangFormatVersion: 9
          style: file

#
# Phase 2
#

  p2-cmake-linux-ubuntu2204:
    name: p2-cmake-linux-ubuntu2204 (${{ matrix.compiler.cc }}, c++${{ matrix.standard }}, webkitgtk${{ matrix.webkitgtk-api }})
    needs: p1-checks
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        standard: [11, 14, 17, 20]
        webkitgtk-api: ['4.0', '4.1', '6.0']
        compiler:
          - cc: clang-15
            cxx: clang++-15
            gcov: llvm-cov-15 gcov
            apt-packages: clang-15
          - cc: gcc-12
            cxx: g++-12
            gcov: gcov-12
            apt-packages: gcc-12 g++-12
        include:
          - webkitgtk-api: '4.0'
            apt-packages-webkitgtk: libgtk-3-dev libwebkit2gtk-4.0-dev
          - webkitgtk-api: '4.1'
            apt-packages-webkitgtk: libgtk-3-dev libwebkit2gtk-4.1-dev
          - webkitgtk-api: '6.0'
            apt-packages-webkitgtk: libgtk-4-dev libwebkitgtk-6.0-dev
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/cmake
        with:
          cc: ${{ matrix.compiler.cc }}
          cxx: ${{ matrix.compiler.cxx }}
          gcov: ${{ matrix.compiler.gcov }}
          standard: ${{ matrix.standard }}
          generator: Ninja
          artifacts-name: p2-cmake-linux-ubuntu2204_${{ matrix.compiler.cc }}_cxx${{ matrix.standard }}_webkitgtk${{ matrix.webkitgtk-api }}
          test-wrapper-cmd: xvfb-run
          apt-packages: ${{ matrix.compiler.apt-packages }} ${{ matrix.apt-packages-webkitgtk }}
          install-wrapper-cmd: sudo

  p2-cmake-macos12:
    name: p2-cmake-macos12 (c++${{ matrix.standard }}, ${{ matrix.osx-architectures }})
    needs: p1-checks
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: macos-12
            standard: 11
            osx-architectures: x86_64
            test-coverage: true
            distributable: false
          - image: macos-12
            standard: 11
            osx-architectures: arm64;x86_64
            # While we can get coverage for universal binaries, keep it simple by
            # avoiding the need to specify the architecture to get coverage for.
            test-coverage: false
            distributable: true
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/cmake
        with:
          cc: ${{ matrix.cc }}
          cxx: ${{ matrix.cxx }}
          standard: ${{ matrix.standard }}
          generator: Xcode
          osx-architectures: ${{ matrix.osx-architectures }}
          osx-deployment-target: '10.9'
          distributable: ${{ matrix.distributable }}
          install-wrapper-cmd: sudo
          artifacts-name: p2-cmake-macos12_cxx${{ matrix.standard }}_${{ matrix.osx-architectures }}

  p2-cmake-windows-vs2022:
    name: p2-cmake-windows-vs2022 (c++${{ matrix.standard }}, ${{ matrix.generator-platform }})
    needs: p1-checks
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        standard: [14, 17, 20]
        generator-platform: [ARM64, x64, Win32]
        include:
          - image: windows-2022
            test: true
            distributable: false
          - generator-platform: ARM64
            test: false
          - standard: 20
            distributable: true
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/cmake
        with:
          build-type: Debug;Release
          standard: ${{ matrix.standard }}
          generator: Visual Studio 17 2022
          generator-platform: ${{ matrix.generator-platform }}
          test: ${{ matrix.test }}
          test-coverage: false
          distributable: ${{ matrix.distributable }}
          artifacts-name: ${{ matrix.image }}_vs2022_cxx${{ matrix.standard }}_${{ matrix.generator-platform }}

  p2-doxygen:
    needs: p1-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Doxygen
        run: sudo apt-get update && sudo apt-get install doxygen -y
      - run: mkdir -p build/docs
      - name: Run Doxygen
        run: doxygen

  p2-swig:
    needs: p1-checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [csharp, java, python, ruby]
    steps:
      - uses: actions/checkout@v4
      - name: Generate bindings with SWIG
        run: |
          mkdir -p "build/bindings/${{ matrix.language }}" \
            && swig -Wall -Werror -c++ "-${{ matrix.language }}" \
              -outdir "build/bindings/${{ matrix.language }}" \
              -o build/bindings/${{ matrix.language }}/${{ matrix.language }}_wrap.cpp \
              webview.i

#
# Phase 3
#

  p3-cmake-linux-mingw-w64:
    name: p3-cmake-linux-mingw-w64 (c++${{ matrix.standard }}, ${{ matrix.toolchain-file }})
    needs: p2-cmake-windows-vs2022
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        toolchain-file:
          - i686-w64-mingw32
          - x86_64-w64-mingw32
        standard: [14, 17, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/cmake
        with:
          toolchain-file: ${{ github.workspace }}/cmake/toolchains/${{ matrix.toolchain-file }}.cmake
          standard: ${{ matrix.standard }}
          generator: Ninja
          test: false
          apt-packages: mingw-w64
          install-wrapper-cmd: sudo

  p3-cmake-linux-ubuntu2004:
    name: p3-cmake-linux-ubuntu2004 (${{ matrix.config.cc }}, c++${{ matrix.standard }}, webkitgtk${{ matrix.webkitgtk-api }})
    needs: p2-cmake-linux-ubuntu2204
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        standard: [11]
        webkitgtk-api: ['4.0']
        config:
          - cc: clang-12
            cxx: clang++-12
            gcov: llvm-cov-12 gcov
            apt-packages: clang-12
            test-coverage: true
          - cc: clang-8
            cxx: clang++-8
            gcov: llvm-cov-8 gcov
            test-coverage: false
            apt-packages: clang-8
          - cc: gcc-10
            cxx: g++-10
            gcov: gcov-10
            apt-packages: gcc-10 g++-10
            test-coverage: true
          - cc: gcc-7
            cxx: g++-7
            gcov: gcov-7
            apt-packages: gcc-7 g++-7
            test-coverage: false
        include:
          - webkitgtk-api: '4.0'
            apt-packages-webkitgtk: libgtk-3-dev libwebkit2gtk-4.0-dev
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/cmake
        with:
          cc: ${{ matrix.config.cc }}
          cxx: ${{ matrix.config.cxx }}
          gcov: ${{ matrix.config.gcov }}
          standard: ${{ matrix.standard }}
          generator: Ninja
          artifacts-name: p3-cmake-linux-ubuntu2004_${{ matrix.config.cc }}_cxx${{ matrix.standard }}_webkitgtk${{ matrix.webkitgtk-api }}
          test-wrapper-cmd: xvfb-run
          apt-packages: ${{ matrix.config.apt-packages }} ${{ matrix.apt-packages-webkitgtk }}
          install-wrapper-cmd: sudo

  p3-cmake-macos14:
    name: p3-cmake-macos14 (c++${{ matrix.standard }})
    needs: p2-cmake-macos12
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        standard: [11, 14, 17, 20]
        include:
          - image: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/cmake
        with:
          cc: clang
          cxx: clang++
          standard: ${{ matrix.standard }}
          generator: Xcode
          install-wrapper-cmd: sudo
          artifacts-name: p3-cmake-macos14_cxx${{ matrix.standard }}

  p3-cmake-msys2:
    name: p3-cmake-msys2 (${{ matrix.msys2-system }}, ${{ matrix.cc }}, c++${{ matrix.standard }})
    needs: p2-cmake-windows-vs2022
    runs-on: windows-2022
    strategy:
      matrix:
          standard: [14, 17, 20]
          # "MSYS" environment skipped due to error "pacman: unknown option -- a"
          # "CLANGARM64" environment skipped due to error "/clangarm64/bin/cmake: cannot execute binary file: Exec format error"
          msys2-system:
            - CLANG64
            - CLANG32
            - UCRT64
            - MINGW64
            - MINGW32
          # Test coverage disabled for GCC due to conflicting coverage data.
          include:
            - msys2-system: CLANG64
              cc: clang
              cxx: clang++
              test-coverage: true
            - msys2-system: CLANG32
              cc: clang
              cxx: clang++
              test-coverage: true
            - msys2-system: UCRT64
              cc: gcc
              cxx: g++
              test-coverage: false
            - msys2-system: MINGW64
              cc: gcc
              cxx: g++
              test-coverage: false
            - msys2-system: MINGW32
              cc: gcc
              cxx: g++
              test-coverage: false
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/cmake
        with:
          cc: ${{ matrix.cc }}
          cxx: ${{ matrix.cxx }}
          standard: ${{ matrix.standard }}
          generator: MSYS Makefiles
          artifacts-name: p3-cmake-msys2_${{ matrix.msys2-system }}_${{ matrix.cc }}_cxx${{ matrix.standard }}
          msys2-system: ${{ matrix.msys2-system }}
          shell: msys2 {0}

  p3-cmake-windows-vs2019:
    name: p3-cmake-windows-vs2019 (vs2019, c++${{ matrix.standard }}, ${{ matrix.generator-platform }})
    needs: p2-cmake-windows-vs2022
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          - image: windows-2019
          - standard: 14
          - generator-platform: x64
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/cmake
        with:
          build-type: Debug;Release
          standard: ${{ matrix.standard }}
          generator: Visual Studio 16 2019
          generator-platform: ${{ matrix.generator-platform }}
          artifacts-name: ${{ matrix.image }}_vs2019_cxx${{ matrix.standard }}_${{ matrix.generator-platform }}
          # WebView2 runtime is unavailable
          test: false

#
# Phase 4
#

  p4-test-coverage:
    needs:
      - p3-cmake-linux-mingw-w64
      - p3-cmake-linux-ubuntu2004
      - p3-cmake-macos14
      - p3-cmake-msys2
      - p3-cmake-windows-vs2019
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: ./.github/workflows/coverage
