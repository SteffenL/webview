name: CMake
on: [push, pull_request]
jobs:
  # Main CMake jobs
  cmake-main:
    runs-on: ubuntu-latest
    needs:
      - cmake-main-linux
      - cmake-main-linux-mingw-w64
      - cmake-main-macos
      - cmake-main-windows-msys2
      - cmake-main-windows-msvc
    steps:
      - run: echo

  swig:
    needs: cmake-main
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [csharp, java, python, ruby]
    steps:
      - uses: actions/checkout@v3
      - name: Generate bindings with SWIG
        run: |
          mkdir -p "build/bindings/${{ matrix.language }}" \
            && swig -Wall -Werror -c++ "-${{ matrix.language }}" \
              -outdir "build/bindings/${{ matrix.language }}" \
              -o build/bindings/${{ matrix.language }}/${{ matrix.language }}_wrap.cpp \
              webview.i

  test-coverage:
    runs-on: ubuntu-latest
    needs: cmake-main
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - uses: ./.github/workflows/coverage

  cmake-main-linux:
    name: cmake-main (${{ matrix.image }}, linux, ${{ matrix.cc }}, c++${{ matrix.standard }})
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: ubuntu-22.04
            cc: clang-15
            cxx: clang++-15
            gcov: llvm-cov-15 gcov
            clang-format: clang-format-15
            clang-tidy: clang-tidy-15
            standard: 11
            checks: true
            test-coverage: true
            apt-packages: clang-15
          - image: ubuntu-22.04
            cc: gcc-12
            cxx: g++-12
            gcov: gcov-12
            standard: 11
            checks: false
            test-coverage: false
            apt-packages: gcc-12 g++-12
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          cc: ${{ matrix.cc }}
          clang-format: ${{ matrix.clang-format }}
          clang-tidy: ${{ matrix.clang-tidy }}
          cxx: ${{ matrix.cxx }}
          gcov: ${{ matrix.gcov }}
          standard: ${{ matrix.standard }}
          generator: Ninja
          checks: ${{ matrix.checks }}
          test-coverage: ${{ matrix.test-coverage }}
          test-coverage-name: main_linux_${{ matrix.cc }}_cxx${{ matrix.standard }}
          test-wrapper-cmd: xvfb-run
          apt-packages: ${{ matrix.apt-packages }}
          install-wrapper-cmd: sudo

  cmake-extra-linux:
    name: cmake-extra (${{ matrix.image }}, linux, ${{ matrix.cc }}, c++${{ matrix.standard }})
    runs-on: ${{ matrix.image }}
    needs: cmake-main
    strategy:
      matrix:
        include:
          - image: ubuntu-20.04
            cc: clang-8
            cxx: clang++-8
            gcov: llvm-cov-8 gcov
            standard: 11
            checks: false
            apt-packages: clang-8
          - image: ubuntu-22.04
            cc: clang-15
            cxx: clang++-15
            gcov: llvm-cov-15 gcov
            clang-format: clang-format-15
            clang-tidy: clang-tidy-15
            standard: 14
            checks: true
            apt-packages: clang-15
          - image: ubuntu-22.04
            cc: clang-15
            cxx: clang++-15
            gcov: llvm-cov-15 gcov
            clang-format: clang-format-15
            clang-tidy: clang-tidy-15
            standard: 17
            checks: true
            apt-packages: clang-15
          - image: ubuntu-22.04
            cc: clang-15
            cxx: clang++-15
            gcov: llvm-cov-15 gcov
            clang-format: clang-format-15
            clang-tidy: clang-tidy-15
            standard: 20
            checks: true
            apt-packages: clang-15
          - image: ubuntu-20.04
            cc: gcc-7
            cxx: g++-7
            gcov: gcov-7
            standard: 11
            checks: false
            apt-packages: gcc-7 g++-7
          - image: ubuntu-22.04
            cc: gcc-12
            cxx: g++-12
            gcov: gcov-12
            standard: 14
            checks: false
            apt-packages: gcc-12 g++-12
          - image: ubuntu-22.04
            cc: gcc-12
            cxx: g++-12
            gcov: gcov-12
            standard: 17
            checks: false
            apt-packages: gcc-12 g++-12
          - image: ubuntu-22.04
            cc: gcc-12
            cxx: g++-12
            gcov: gcov-12
            standard: 20
            checks: false
            apt-packages: gcc-12 g++-12
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          cc: ${{ matrix.cc }}
          clang-format: ${{ matrix.clang-format }}
          clang-tidy: ${{ matrix.clang-tidy }}
          cxx: ${{ matrix.cxx }}
          gcov: ${{ matrix.gcov }}
          standard: ${{ matrix.standard }}
          generator: Ninja
          checks: ${{ matrix.checks }}
          test-coverage: false
          test-wrapper-cmd: xvfb-run
          apt-packages: ${{ matrix.apt-packages }}
          install-wrapper-cmd: sudo

  cmake-main-linux-mingw-w64:
    name: cmake-main (${{ matrix.image }}, win, ${{ matrix.toolchain-file }}, c++${{ matrix.standard }})
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: ubuntu-22.04
            toolchain-file: x86_64-w64-mingw32
            standard: 14
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          toolchain-file: ${{ github.workspace }}/build_system/cmake/toolchains/${{ matrix.toolchain-file }}.cmake
          standard: ${{ matrix.standard }}
          generator: Ninja
          checks: false
          test: false
          apt-packages: mingw-w64
          install-wrapper-cmd: sudo

  cmake-extra-linux-mingw-w64:
    name: cmake-extra (${{ matrix.image }}, win, ${{ matrix.toolchain-file }}, c++${{ matrix.standard }})
    runs-on: ${{ matrix.image }}
    needs: cmake-main
    strategy:
      matrix:
        include:
          - image: ubuntu-22.04
            toolchain-file: i686-w64-mingw32
            standard: 14
          - image: ubuntu-22.04
            toolchain-file: x86_64-w64-mingw32
            standard: 17
          - image: ubuntu-22.04
            toolchain-file: x86_64-w64-mingw32
            standard: 20
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          toolchain-file: ${{ github.workspace }}/build_system/cmake/toolchains/${{ matrix.toolchain-file }}.cmake
          standard: ${{ matrix.standard }}
          generator: Ninja
          checks: false
          test: false
          apt-packages: mingw-w64
          install-wrapper-cmd: sudo

  cmake-main-macos:
    name: cmake-main (${{ matrix.image }}, macos, c++${{ matrix.standard }}, ${{ matrix.osx-architectures }})
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: macos-12
            standard: 11
            checks: true
            test-coverage: true
            osx-architectures: x86_64
            distributable: false
          - image: macos-12
            standard: 11
            checks: false
            # While we can get coverage for universal binaries, keep it simple by
            # avoiding the need to specify the architecture to get coverage for.
            test-coverage: false
            osx-architectures: arm64;x86_64
            distributable: true
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          cc: clang
          cxx: clang++
          standard: ${{ matrix.standard }}
          generator: Xcode
          checks: ${{ matrix.checks }}
          test-coverage: ${{ matrix.test-coverage }}
          test-coverage-name: main_macos_cxx${{ matrix.standard }}
          osx-architectures: ${{ matrix.osx-architectures }}
          install-wrapper-cmd: sudo
          distributable: ${{ matrix.distributable }}

  cmake-extra-macos:
    name: cmake-extra (${{ matrix.image }}, macos, c++${{ matrix.standard }})
    runs-on: ${{ matrix.image }}
    needs: cmake-main
    strategy:
      matrix:
        include:
          - image: macos-11
            standard: 11
          - image: macos-12
            standard: 14
          - image: macos-12
            standard: 17
          - image: macos-12
            standard: 20
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          cc: clang
          cxx: clang++
          standard: ${{ matrix.standard }}
          generator: Xcode
          checks: true
          test-coverage: false
          install-wrapper-cmd: sudo

  cmake-main-windows-msys2:
    name: cmake-main (${{ matrix.image }}, win, msys2, ${{ matrix.msys2-system }}, ${{ matrix.cc }}, c++${{ matrix.standard }})
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: windows-2022
            cc: clang
            cxx: clang++
            standard: 14
            checks: true
            test-coverage: true
            msys2-system: CLANG64
          - image: windows-2022
            cc: gcc
            cxx: g++
            standard: 14
            checks: false
            test-coverage: false
            msys2-system: UCRT64
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          cc: ${{ matrix.cc }}
          cxx: ${{ matrix.cxx }}
          standard: ${{ matrix.standard }}
          generator: MSYS Makefiles
          checks: ${{ matrix.checks }}
          test-coverage: ${{ matrix.test-coverage }}
          test-coverage-name: main_win_msys2_${{ matrix.msys2-system }}_${{ matrix.cc }}_cxx${{ matrix.standard }}
          msys2-system: ${{ matrix.msys2-system }}
          shell: msys2 {0}

  cmake-extra-windows-msys2:
    name: cmake-extra (${{ matrix.msys2-system }}, ${{ matrix.image }}, win, msys2, ${{ matrix.cc }}, c++${{ matrix.standard }})
    runs-on: ${{ matrix.image }}
    needs: cmake-main
    strategy:
      matrix:
        include:
          # "MSYS" environment skipped due to error "pacman: unknown option -- a"
          # "CLANGARM64" environment skipped due to error "/clangarm64/bin/cmake: cannot execute binary file: Exec format error"
          - image: windows-2022
            cc: clang
            cxx: clang++
            standard: 17
            msys2-system: CLANG64
          - image: windows-2022
            cc: clang
            cxx: clang++
            standard: 20
            msys2-system: CLANG64
          - image: windows-2022
            cc: clang
            cxx: clang++
            standard: 14
            msys2-system: CLANG32
          - image: windows-2022
            cc: gcc
            cxx: g++
            standard: 14
            msys2-system: MINGW64
          - image: windows-2022
            cc: gcc
            cxx: g++
            standard: 14
            msys2-system: MINGW32
          - image: windows-2022
            cc: gcc
            cxx: g++
            standard: 17
            msys2-system: UCRT64
          - image: windows-2022
            cc: gcc
            cxx: g++
            standard: 20
            msys2-system: UCRT64
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          cc: ${{ matrix.cc }}
          cxx: ${{ matrix.cxx }}
          standard: ${{ matrix.standard }}
          generator: MSYS Makefiles
          checks: false
          test-coverage: false
          msys2-system: ${{ matrix.msys2-system }}
          shell: msys2 {0}

  cmake-main-windows-msvc:
    name: cmake-main (${{ matrix.image }}, win, msvc, c++${{ matrix.standard }}, ${{ matrix.generator-platform }})
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: windows-2022
            standard: 14
            generator: Visual Studio 17 2022
            generator-platform: ARM64
            # Skip tests because we can't execute ARM64 binaries
            test: false
          - image: windows-2022
            standard: 14
            generator: Visual Studio 17 2022
            generator-platform: x64
            test: true
          - image: windows-2022
            standard: 14
            generator: Visual Studio 17 2022
            generator-platform: Win32
            test: true
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          build-type: Debug;Release
          cc: cl
          cxx: cl
          standard: ${{ matrix.standard }}
          generator: ${{ matrix.generator }}
          generator-platform: ${{ matrix.generator-platform }}
          checks: false
          test: ${{ matrix.test }}
          test-coverage: false
          distributable: true

  cmake-extra-windows-msvc:
    name: cmake-extra (${{ matrix.image }}, win, msvc, c++${{ matrix.standard }}, ${{ matrix.generator-platform }})
    runs-on: ${{ matrix.image }}
    needs: cmake-main
    strategy:
      matrix:
        include:
          - image: windows-2019
            standard: 14
            generator: Visual Studio 16 2019
            generator-platform: x64
            # Skip tests because WebView2 Runtime isn't installed
            test: false
          - image: windows-2022
            standard: 17
            generator: Visual Studio 17 2022
            generator-platform: x64
            test: true
          - image: windows-2022
            standard: 20
            generator: Visual Studio 17 2022
            generator-platform: x64
            test: true
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/cmake
        with:
          cc: cl
          cxx: cl
          standard: ${{ matrix.standard }}
          generator: ${{ matrix.generator }}
          generator-platform: ${{ matrix.generator-platform }}
          checks: false
          test: ${{ matrix.test }}
          test-coverage: false
