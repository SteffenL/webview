name: CI / Coverage
on:
  workflow_call:
    inputs:
      gcovr-version:
        type: string
        description: gcovr version
        required: false
        default: '7.2'
      report-dir:
        type: string
        description: Coverage report output directory
        required: false
        default: report
jobs:
  linux:
    strategy:
      matrix:
        cxx-std: [11, 20]
        webkitgtk-api: ['4.0', '4.1', '6.0']
        config:
          - { toolchain: llvm, compiler-name: clang15, cc: clang-15, cxx: clang++-15, gcov: llvm-cov-15 gcov, apt: clang-15 clang++-15 }
          - { toolchain: gnu,  compiler-name: gcc12,   cc: gcc-12,   cxx: g++-12,     gcov: gcov-12,          apt: gcc-12 g++-12 }
        include:
          - webkitgtk-api: '4.0'
            apt-webkitgtk: libgtk-3-dev libwebkit2gtk-4.0-dev
          - webkitgtk-api: '4.1'
            apt-webkitgtk: libgtk-3-dev libwebkit2gtk-4.1-dev
          - webkitgtk-api: '6.0'
            apt-webkitgtk: libgtk-4-dev libwebkitgtk-6.0-dev
    uses: ./.github/workflows/coverage-collect.yml
    with:
      apt: ${{ matrix.config.apt }} ${{ matrix.apt-webkitgtk }}
      cc: ${{ matrix.config.cc }}
      compiler-name: ${{ matrix.config.compiler-name }}
      cxx: ${{ matrix.config.cxx }}
      cxx-std: ${{ matrix.cxx-std }}
      image: ubuntu-22.04
      gcov: ${{ matrix.config.gcov }}
      gcovr-version: ${{ inputs.gcovr-version }}
      gen: Ninja
      report-dir: ${{ inputs.report-dir }}
      shell: bash
      test-wrapper-cmd: xvfb-run
      toolchain: ${{ matrix.config.toolchain }}

  macos:
    strategy:
      matrix:
        cxx-std: [11, 20]
        config:
          - { toolchain: llvm, compiler-name: clang, cc: clang, cxx: clang++, gcov: xcrun llvm-cov gcov }
    uses: ./.github/workflows/coverage-collect.yml
    with:
      cc: ${{ matrix.config.cc }}
      compiler-name: ${{ matrix.config.compiler-name }}
      cxx: ${{ matrix.config.cxx }}
      cxx-std: ${{ matrix.cxx-std }}
      image: macos-14
      gcov: ${{ matrix.config.gcov }}
      gcovr-version: ${{ inputs.gcovr-version }}
      gen: Xcode
      report-dir: ${{ inputs.report-dir }}
      shell: bash
      toolchain: ${{ matrix.config.toolchain }}

  windows:
    strategy:
      matrix:
        cxx-std: [11, 20]
        config:
          - { toolchain: msys2-gnu-ucrt64,   compiler-name: gcc,   cc: gcc,   cxx: g++,     gcov: gcov,          msys: UCRT64 }
          - { toolchain: msys2-llvm-clang64, compiler-name: clang, cc: clang, cxx: clang++, gcov: llvm-cov gcov, msys: CLANG64 }
    uses: ./.github/workflows/coverage-collect.yml
    with:
      cc: ${{ matrix.config.cc }}
      compiler-name: ${{ matrix.config.compiler-name }}
      cxx: ${{ matrix.config.cxx }}
      cxx-std: ${{ matrix.cxx-std }}
      image: windows-2022
      gcov: ${{ matrix.config.gcov }}
      gcovr-version: ${{ inputs.gcovr-version }}
      gen: Ninja
      msys: ${{ matrix.config.msys }}
      report-dir: ${{ inputs.report-dir }}
      shell: msys2 {0}
      toolchain: ${{ matrix.config.toolchain }}

  report:
    needs:
      - linux
      - macos
      - windows
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        run: >
          sudo apt-get install --no-install-recommends -y
          python3
          python3-lxml
          python3-markupsafe
          python3-pip

      - name: Install gcovr
        run: pip install "gcovr==${{ inputs.gcovr-version }}"

      - name: Merge test coverage artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: test_coverage_data
          pattern: test_coverage_data_*
          delete-merged: true
          retention-days: 1

      - name: Download test coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: test_coverage_data

      - name: Generate report
        run: |
          tracefile_args=()
          while read f; do
            tracefile_args+=(--add-tracefile "${f}")
          done <<< "$(find . -type f -name "coverage.json")"
          mkdir -p "${{ inputs.report-dir }}/html"
          gcovr --config gcovr.ci.cfg --json "${{ inputs.report-dir }}/gcovr.json" "${tracefile_args[@]}"
          gcovr --config gcovr.ci.cfg --coveralls "${{ inputs.report-dir }}/coveralls.json" --add-tracefile "${{ inputs.report-dir }}/gcovr.json"
          gcovr --config gcovr.ci.cfg --json-summary "${{ inputs.report-dir }}/summary.json" --add-tracefile "${{ inputs.report-dir }}/gcovr.json"
          gcovr --config gcovr.ci.cfg --html-details "${{ inputs.report-dir }}/html/index.html" --add-tracefile "${{ inputs.report-dir }}/gcovr.json"

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test_coverage_report
          path: ${{ inputs.report-dir }}
          retention-days: 1
          if-no-files-found: error

      - name: Add report to CI job summary
        uses: actions/github-script@v7
        with:
          script: |
            const numberOr = (value, alternative) => Number.isNaN(value = parseInt(value)) ? alternative : value;
            const percentValue = (value, percentSymbol = "%") => numberOr(value, "-") + percentSymbol;
            const data = require("./${{ inputs.report-dir }}/summary.json");
            await core.summary
              .addHeading("Test Coverage Summary")
              .addTable([
                [
                  { data: "Lines", header: true },
                  { data: "Functions", header: true },
                  { data: "Branches", header: true }
                ],
                [
                  `${percentValue(data.line_percent)} ${data.line_covered}/${data.line_total}`,
                  `${percentValue(data.function_percent)} ${data.function_covered}/${data.function_total}`,
                  `${percentValue(data.branch_percent)} ${data.branch_covered}/${data.branch_total}`
                ]
              ])
              .addTable([
                [
                  { data: "File", header: true },
                  { data: "Lines", header: true },
                  { data: "Functions", header: true },
                  { data: "Branches", header: true }
                ],
                ...data.files.map(file => [
                  file.filename,
                  `${percentValue(file.line_percent)} ${file.line_covered}/${file.line_total}`,
                  `${percentValue(file.function_percent)} ${file.function_covered}/${file.function_total}`,
                  `${percentValue(file.branch_percent)} ${file.branch_covered}/${file.branch_total}`
                ])
              ])
              .write();
