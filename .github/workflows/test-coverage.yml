name: CI / Test Coverage
on:
  workflow_call:
    inputs:
      gcovr-version:
        type: string
        description: gcovr version
        required: false
        default: '7.2'
jobs:
  test:
    name: ${{ matrix.os }} (c++${{ matrix.cxx-std }}, ${{ matrix.a }}, ${{ matrix.t }}${{ matrix.tes }}${{ matrix.name-suffix }})
    runs-on: ${{ matrix.i }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # os:      Target operating systme
          # a:       Architecture
          # i:       Image
          # cxx-std: C++ standard
          # g:       CMake generator
          # msvc-mt: Use static MSVC runtime library
          # t:       Toolchain
          # tes:     Toolchain executable suffix
          # sh:      Shell
          - { os: linux,   i: ubuntu-22.04, cxx-std: 20, a: host,      t: llvm,               tes: '-15',    g: Ninja Multi-Config,    sh: bash,        name-suffix: ', webkitgtk6.0', gcov: llvm-cov-15 gcov,   test-wrapper-cmd: xvfb-run, apt: clang-15 clang++-15, webkitgtk-api: '6.0' }
          - { os: linux,   i: ubuntu-22.04, cxx-std: 20, a: host,      t: llvm,               tes: '-15',    g: Ninja Multi-Config,    sh: bash,        name-suffix: ', webkitgtk4.1', gcov: llvm-cov-15 gcov,   test-wrapper-cmd: xvfb-run, apt: clang-15 clang++-15, webkitgtk-api: '4.1' }
          - { os: linux,   i: ubuntu-22.04, cxx-std: 20, a: host,      t: llvm,               tes: '-15',    g: Ninja Multi-Config,    sh: bash,        name-suffix: ', webkitgtk4.0', gcov: llvm-cov-15 gcov,   test-wrapper-cmd: xvfb-run, apt: clang-15 clang++-15, webkitgtk-api: '4.0' }
          - { os: macos,   i: macos-14,     cxx-std: 20, a: universal, t: macos-llvm,         tes: '',       g: Xcode,                 sh: bash,        name-suffix: '',               gcov: xcrun llvm-cov gcov }
          - { os: windows, i: windows-2022, cxx-std: 20, a: x86_64,    t: msys2-llvm-clang64, tes: '',       g: Ninja Multi-Config,    sh: 'msys2 {0}', name-suffix: ', CLANG64',      gcov: llvm-cov gcov,      msys: CLANG64 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/workflows/setup-env
        with:
          apt: ${{ matrix.apt }}
          msys: ${{ matrix.msys }}
          msys-pacboy: ${{ matrix.msys-pacboy }}
          webkitgtk-api: ${{ matrix.webkitgtk-api }}

      - name: Build artifacts name
        uses: actions/github-script@v7
        id: artifacts-name
        env:
          OS: ${{ matrix.os }}
          IMAGE: ${{ matrix.i }}
          ARCH: ${{ matrix.a }}
          CXX_STD: ${{ matrix.cxx-std }}
          TOOLCHAIN: ${{ matrix.t }}
          TOOLCHAIN_EXECUTABLE_SUFFIX: ${{ matrix.tes }}
          WEBKITGTK_API: ${{ matrix.webkitgtk-api }}
          MSVC_MT: ${{ matrix.msvc-mt }}
        with:
          script: |
            return [
              process.env.OS,
              process.env.IMAGE,
              process.env.ARCH,
              process.env.CXX_STD,
              process.env.TOOLCHAIN,
              process.env.TOOLCHAIN_EXECUTABLE_SUFFIX,
              process.env.WEBKITGTK_API,
              process.env.MSVC_MT,
            ].filter(v => v !== undefined && v !== "").join("_")
          result-encoding: string

      - name: Build CMake options
        uses: actions/github-script@v7
        id: cmake-options
        env:
          ARCH: ${{ matrix.a }}
          CHECKS: ${{ matrix.checks }}
          DOCS: ${{ matrix.docs }}
          CXX_STD: ${{ matrix.cxx-std }}
          OSX_DEPLOYMENT_TARGET: ${{ matrix.osx-deployment-target }}
          TOOLCHAIN: ${{ matrix.t }}
          TOOLCHAIN_EXECUTABLE_SUFFIX: ${{ matrix.tes }}
          MSVC_MT: ${{ matrix.msvc-mt }}
        with:
          script: |
            const option = (k, v, t) => v === undefined ? undefined : [k, ({
                Boolean: () => JSON.parse((v === undefined || v === "") ? false : v) ? "ON" : "OFF"
              }[t ? t.name : undefined] || (() => v))()
            ].join("=");
            return [
              option("CMAKE_CXX_STANDARD", process.env.CXX_STD),
              option("CMAKE_OSX_DEPLOYMENT_TARGET", process.env.OSX_DEPLOYMENT_TARGET),
              option("CMAKE_TOOLCHAIN_FILE", `cmake/toolchains/${process.env.ARCH}-${process.env.TOOLCHAIN}.cmake`),
              option("WEBVIEW_BUILD_DOCS", process.env.DOCS, Boolean),
              option("WEBVIEW_INSTALL_DOCS", process.env.DOCS, Boolean),
              option("WEBVIEW_TOOLCHAIN_EXECUTABLE_SUFFIX", process.env.TOOLCHAIN_EXECUTABLE_SUFFIX),
              option("WEBVIEW_USE_STATIC_MSVC_RUNTIME", process.env.MSVC_MT, Boolean),
              option("WEBVIEW_ENABLE_CHECKS", process.env.CHECKS, Boolean),
            ].filter(v => v !== undefined);

      - name: CMake
        uses: ./.github/workflows/cmake
        with:
          artifacts-name: ${{ steps.artifacts-name.outputs.result }}
          build-dir: build
          cmake-options: ${{ steps.cmake-options.outputs.result }}
          coverage: true
          gcov: ${{ matrix.gcov }}
          gcovr-version: ${{ inputs.gcovr-version }}
          generator: ${{ matrix.g }}
          shell: ${{ matrix.sh }}
          source-dir: .
          test-wrapper-cmd: ${{ matrix.test-wrapper-cmd }}

  report:
    needs: test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        run: >
          sudo apt-get install --no-install-recommends -y
          python3
          python3-lxml
          python3-markupsafe
          python3-pip

      - name: Install gcovr
        run: pip install "gcovr==${{ inputs.gcovr-version }}"

      - name: Merge test coverage artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: test_coverage_data
          pattern: test_coverage_data_*
          delete-merged: true
          retention-days: 1
          separate-directories: true

      - name: Download merged test coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: test_coverage_data

      - name: Generate report
        id: generate-report
        run: |
          tracefile_args=()
          while read f; do
            tracefile_args+=(--add-tracefile "${f}")
          done <<< "$(find . -type f -name "coverage.json")"

          artifact_dir="temp_${RANDOM}/report"
          mkdir -p "${artifact_dir}/html"

          gcovr --config gcovr.ci.cfg --json "${artifact_dir}/gcovr.json" "${tracefile_args[@]}"
          gcovr --config gcovr.ci.cfg --coveralls "${artifact_dir}/coveralls.json" --add-tracefile "${artifact_dir}/gcovr.json"
          gcovr --config gcovr.ci.cfg --json-summary "${artifact_dir}/summary.json" --add-tracefile "${artifact_dir}/gcovr.json"
          gcovr --config gcovr.ci.cfg --html-details "${artifact_dir}/html/index.html" --add-tracefile "${artifact_dir}/gcovr.json"

          echo "upload-dir=${artifact_dir}" >> "${GITHUB_OUTPUT}"

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test_coverage_report
          path: ${{ steps.generate-report.outputs.upload-dir }}
          retention-days: 1
          if-no-files-found: error

      - name: Add report to CI job summary
        uses: actions/github-script@v7
        with:
          script: |
            const numberOr = (value, alternative) => Number.isNaN(value = parseInt(value)) ? alternative : value;
            const percentValue = (value, percentSymbol = "%") => numberOr(value, "-") + percentSymbol;
            const data = require("./${{ steps.generate-report.outputs.upload-dir }}/summary.json");
            await core.summary
              .addHeading("Test Coverage Summary")
              .addTable([
                [
                  { data: "Lines", header: true },
                  { data: "Functions", header: true },
                  { data: "Branches", header: true }
                ],
                [
                  `${percentValue(data.line_percent)} ${data.line_covered}/${data.line_total}`,
                  `${percentValue(data.function_percent)} ${data.function_covered}/${data.function_total}`,
                  `${percentValue(data.branch_percent)} ${data.branch_covered}/${data.branch_total}`
                ]
              ])
              .addTable([
                [
                  { data: "File", header: true },
                  { data: "Lines", header: true },
                  { data: "Functions", header: true },
                  { data: "Branches", header: true }
                ],
                ...data.files.map(file => [
                  file.filename,
                  `${percentValue(file.line_percent)} ${file.line_covered}/${file.line_total}`,
                  `${percentValue(file.function_percent)} ${file.function_covered}/${file.function_total}`,
                  `${percentValue(file.branch_percent)} ${file.branch_covered}/${file.branch_total}`
                ])
              ])
              .write();
