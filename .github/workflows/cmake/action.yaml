name: CMake
description: Main CMake action.
inputs:
  apt-packages:
    description: Space-deliminated names of packages to install with apt-get
    required: false
  build-dir:
    description: CMake build directory
    required: true
    default: build
  build-type:
    description: Semicolon-separated CMake build types (Debug, Release, etc)
    required: true
    default: Release
  build-tests-target:
    description: CMake target for building all tests
    required: true
  cc:
    description: Sets CMAKE_C_COMPILER
    required: false
  cxx:
    description: Sets CMAKE_CXX_COMPILER
    required: false
  distributable:
    description: Whether build artifacts are distributable
    required: false
  gcov:
    description: gcov executable (gcov-12, llvm-cov-15 gcov, etc)
    required: false
  gcovr-version:
    description: Version of gcovr to install
    required: true
    default: '6.0'
  generator:
    description: CMake generator
    required: true
  generator-platform:
    description: Sets CMAKE_GENERATOR_PLATFORM
    required: false
  image:
    description: GHA runner image name
    required: true
  install-wrapper-cmd:
    description: Wrapper command for installing the CMake package
    required: false
  msys2-system:
    description: MSYS2 system (UCRT64, CLANG64, etc)
    required: false
  osx-architectures:
    description: Sets CMAKE_OSX_ARCHITECTURES
    required: false
  package-test-build-dir:
    description: CMake build directory for testing the CMake package
    required: true
    default: packaging/test/build
  package-test-source-dir:
    description: CMake source directory for testing the CMake package
    required: true
    default: packaging/test
  shell:
    description: Shell
    required: true
    default: bash
  source-dir:
    description: CMake source directory
    required: true
    default: .
  standard:
    description: C++ standard (11, 14, etc)
    required: true
  test:
    description: Whether to enable tests
    required: true
    default: 'true'
  test-build-dir:
    description: CMake build directory for tests
    required: true
    default: build-test
  test-build-type:
    description: CMake build type for test targets
    required: true
    default: Profile
  test-coverage:
    description: Whether to enable test coverage
    required: false
    default: 'true'
  test-coverage-name:
    description: Test coverage name when enabled
    required: false
  test-wrapper-cmd:
    description: Wrapper command for running tests
    required: false
  toolchain-file:
    description: Sets CMAKE_TOOLCHAIN_FILE
    required: false
runs:
  using: composite
  steps:
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        # Install dependencies (Linux)
        sudo apt-get update
        packages=(cmake libwebkit2gtk-4.0-dev ninja-build xvfb)
        if [[ ! -z "${{ inputs.apt-packages }}" ]]; then
          packages+=(${{ inputs.apt-packages }})
        fi
        sudo apt-get install "${packages[@]}" -y
      shell: bash

    - name: Set up MSYS2
      if: runner.os == 'Windows' && inputs.msys2-system != ''
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ inputs.msys2-system }}
        update: false
        install: base-devel
        pacboy: cmake:p python:p python-pip:p python-lxml:p toolchain:p

    - name: Configure tests
      uses: ./.github/workflows/cmake/configure
      with:
        build-dir: ${{ inputs.test-build-dir }}
        source-dir: ${{ inputs.source-dir }}
        build-type: ${{ inputs.test-build-type }}
        cc: ${{ inputs.cc }}
        cxx: ${{ inputs.cxx }}
        standard: ${{ inputs.standard }}
        generator: ${{ inputs.generator }}
        generator-platform: ${{ inputs.generator-platform }}
        toolchain-file: ${{ inputs.toolchain-file }}
        osx-architectures: ${{ inputs.osx-architectures }}
        shell: ${{ inputs.shell }}

    - name: Build tests
      if: fromJSON(inputs.test)
      uses: ./.github/workflows/cmake/build
      with:
        build-dir: ${{ inputs.test-build-dir }}
        build-type: ${{ inputs.test-build-type }}
        target: ${{ inputs.build-tests-target }}
        shell: ${{ inputs.shell }}

    - name: Run tests
      if: fromJSON(inputs.test)
      uses: ./.github/workflows/cmake/test
      with:
        build-dir: ${{ inputs.test-build-dir }}
        build-type: ${{ inputs.test-build-type }}
        test-wrapper-cmd: ${{ inputs.test-wrapper-cmd }}
        shell: ${{ inputs.shell }}

    - name: Configure project
      uses: ./.github/workflows/cmake/configure
      with:
        build-dir: ${{ inputs.build-dir }}
        source-dir: ${{ inputs.source-dir }}
        build-type: ${{ inputs.build-type }}
        cc: ${{ inputs.cc }}
        cxx: ${{ inputs.cxx }}
        standard: ${{ inputs.standard }}
        generator: ${{ inputs.generator }}
        generator-platform: ${{ inputs.generator-platform }}
        toolchain-file: ${{ inputs.toolchain-file }}
        osx-architectures: ${{ inputs.osx-architectures }}
        shell: ${{ inputs.shell }}

    - name: Build project
      uses: ./.github/workflows/cmake/build
      with:
        build-dir: ${{ inputs.build-dir }}
        build-type: ${{ inputs.build-type }}
        shell: ${{ inputs.shell }}

    - name: Package
      run: |
        # Package
        args=()
        if [[ ! -z "${{ inputs.build-type }}" ]]; then
          args+=(-C "${{ inputs.build-type }}")
        fi
        cpack "${args[@]}"
      working-directory: ${{ inputs.build-dir }}
      shell: ${{ inputs.shell }}

    - name: Ensure failure to configure CMake example before installing library
      uses: ./.github/workflows/cmake/configure
      with:
        build-dir: ${{ inputs.package-test-build-dir }}
        source-dir: ${{ inputs.package-test-source-dir }}
        build-type: ${{ inputs.build-type }}
        cc: ${{ inputs.cc }}
        cxx: ${{ inputs.cxx }}
        standard: ${{ inputs.standard }}
        generator: ${{ inputs.generator }}
        generator-platform: ${{ inputs.generator-platform }}
        toolchain-file: ${{ inputs.toolchain-file }}
        osx-architectures: ${{ inputs.osx-architectures }}
        require-failure: true
        shell: ${{ inputs.shell }}

    - name: Install project locally
      uses: ./.github/workflows/cmake/install
      with:
        build-dir: ${{ inputs.build-dir }}
        build-type: ${{ inputs.build-type }}
        install-wrapper-cmd: ${{ inputs.install-wrapper-cmd }}
        shell: ${{ inputs.shell }}

    - name: Configure CMake package test
      uses: ./.github/workflows/cmake/configure
      with:
        build-dir: ${{ inputs.package-test-build-dir }}
        source-dir: ${{ inputs.package-test-source-dir }}
        build-type: ${{ inputs.build-type }}
        cc: ${{ inputs.cc }}
        cxx: ${{ inputs.cxx }}
        standard: ${{ inputs.standard }}
        generator: ${{ inputs.generator }}
        generator-platform: ${{ inputs.generator-platform }}
        toolchain-file: ${{ inputs.toolchain-file }}
        osx-architectures: ${{ inputs.osx-architectures }}
        shell: ${{ inputs.shell }}

    - name: Build CMake package test
      uses: ./.github/workflows/cmake/build
      with:
        build-dir: ${{ inputs.package-test-build-dir }}
        build-type: ${{ inputs.build-type }}
        shell: ${{ inputs.shell }}

    - name: Set up Python (Other)
      if: runner.os != 'Windows' || inputs.msys2-system == ''
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install gcovr (MSYS2)
      if: runner.os == 'Windows' && inputs.msys2-system != ''
      run: |
        # Install gcovr (MSYS2)
        pip install "gcovr==${{ inputs.gcovr-version }}"
      shell: msys2 {0}

    - name: Install gcovr (Other)
      if: runner.os != 'Windows' || inputs.msys2-system == ''
      run: |
        # Install gcovr (Other)
        pip3 install "gcovr==${{ inputs.gcovr-version }}"
      shell: bash

    - name: Prepare test coverage artifacts
      id: prepare-test-coverage-artifacts
      if: fromJSON(inputs.test) && (inputs.test-coverage == '' || fromJSON(inputs.test-coverage))
      run: |
        # Prepare test coverage artifacts
        base_dir="test_coverage_${RANDOM}"
        artifact_dir="${base_dir}/coverage/${{ inputs.test-coverage-name }}"

        gcovr_args=(--filter include/ --json "${artifact_dir}/coverage.json")
        if [[ ! -z "${{ inputs.gcov }}" ]]; then
          gcovr_args+=(--gcov-executable "${{ inputs.gcov }}")
        fi

        mkdir -p "${artifact_dir}"
        gcovr "${gcovr_args[@]}"

        echo "upload-dir=${base_dir}" >> "${GITHUB_OUTPUT}"
        find "${base_dir}" -type f
      shell: ${{ inputs.shell }}

    - name: Upload test coverage artifacts
      if: fromJSON(inputs.test) && (inputs.test-coverage == '' || fromJSON(inputs.test-coverage))
      uses: actions/upload-artifact@v3
      with:
        name: test_coverage
        path: ${{ steps.prepare-test-coverage-artifacts.outputs.upload-dir }}
        retention-days: 1
        if-no-files-found: error

    - name: Upload distributable artifacts
      if: matrix.distributable != '' && fromJSON(matrix.distributable)
      uses: actions/upload-artifact@v3
      with:
        name: distributables
        path: |
          ${{ inputs.build-dir }}/*.gz
          ${{ inputs.build-dir }}/*.sha256
          ${{ inputs.build-dir }}/*.zip
        retention-days: 1
        if-no-files-found: error
