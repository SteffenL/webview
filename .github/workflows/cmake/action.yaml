name: CMake
inputs:
  build-type:
    required: true
    default: Release
  generator:
    required: true
    default: Ninja
  shell:
    required: true
    default: bash
  configure:
    required: false
    default: false
  build:
    required: false
    default: false
  test:
    required: false
    default: false
  install:
    required: false
    default: false
  package:
    required: false
    default: false
  package-configurations:
    required: false
  cxx-std:
    required: false
  generator-platform:
    required: false
  test-wrapper-cmd:
    required: false
  install-wrapper-cmd:
    required: false
  toolchain-file:
    required: false
  macos-architectures:
    required: false
  upload-artifacts:
    required: false
  artifact-name:
    required: false
runs:
  using: "composite"
  steps:
    - name: Configure library
      uses: ./.github/workflows/cmake-configure
      if: inputs.configure == '' || fromJSON(inputs.configure)
      with:
        source-dir: build_system/cmake
        build-type: ${{ inputs.build-type }}
        cxx-std: ${{ inputs.cxx-std }}
        generator: ${{ inputs.generator }}
        generator-platform: ${{ inputs.generator-platform }}
        toolchain-file: ${{ inputs.toolchain-file }}
        macos-architectures: ${{ inputs.macos-architectures }}
        shell: ${{ inputs.shell }}
    - name: Build library
      if: inputs.build == '' || fromJSON(inputs.build)
      uses: ./.github/workflows/cmake-build
      with:
        build-type: ${{ inputs.build-type }}
        shell: ${{ inputs.shell }}
    - name: Test library
      if: inputs.test == '' || fromJSON(inputs.test)
      uses: ./.github/workflows/cmake-test
      with:
        test-dir: build/tests
        build-type: ${{ inputs.build-type }}
        test-wrapper-cmd: ${{ inputs.test-wrapper-cmd }}
        shell: ${{ inputs.shell }}
    - name: Generate test coverage report (plain)
      if: inputs.test == '' || fromJSON(inputs.test)
      uses: ./.github/workflows/cmake-build
      with:
        build-type: ${{ inputs.build-type }}
        shell: ${{ inputs.shell }}
        target: webview_coverage_report
    - name: Generate test coverage report (HTML)
      if: inputs.test == '' || fromJSON(inputs.test)
      uses: ./.github/workflows/cmake-build
      with:
        build-type: ${{ inputs.build-type }}
        shell: ${{ inputs.shell }}
        target: webview_coverage_report_html
    - name: Package library
      if: inputs.package == '' || fromJSON(inputs.package)
      uses: ./.github/workflows/cmake-package
      with:
        configurations: ${{ inputs.package-configurations }}
        shell: ${{ inputs.shell }}
    - name: Ensure failure to configure CMake example before installing library
      if: inputs.install == '' || fromJSON(inputs.install)
      uses: ./.github/workflows/cmake-configure
      with:
        build-dir: examples/cmake/build
        source-dir: examples/cmake
        build-type: ${{ inputs.build-type }}
        cxx-std: ${{ inputs.cxx-std }}
        generator: ${{ inputs.generator }}
        generator-platform: ${{ inputs.generator-platform }}
        toolchain-file: ${{ inputs.toolchain-file }}
        macos-architectures: ${{ inputs.macos-architectures }}
        require-failure: true
        shell: ${{ inputs.shell }}
    - name: Install library locally
      uses: ./.github/workflows/cmake-install
      with:
        build-dir: build
        build-type: ${{ inputs.build-type }}
        shell: ${{ inputs.shell }}
        install-wrapper-cmd: ${{ inputs.install-wrapper-cmd }}
      if: inputs.install == '' || fromJSON(inputs.install)
    - name: Configure CMake example
      uses: ./.github/workflows/cmake-configure
      if: inputs.install == '' || fromJSON(inputs.install)
      with:
        build-dir: examples/cmake/build
        source-dir: examples/cmake
        build-type: ${{ inputs.build-type }}
        cxx-std: ${{ inputs.cxx-std }}
        generator: ${{ inputs.generator }}
        generator-platform: ${{ inputs.generator-platform }}
        toolchain-file: ${{ inputs.toolchain-file }}
        macos-architectures: ${{ inputs.macos-architectures }}
        shell: ${{ inputs.shell }}
    - name: Build CMake example
      if: inputs.install == '' || fromJSON(inputs.install)
      uses: ./.github/workflows/cmake-build
      with:
        build-dir: examples/cmake/build
        build-type: ${{ inputs.build-type }}
        shell: ${{ inputs.shell }}
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: inputs.upload-artifacts != '' && fromJSON(inputs.upload-artifacts)
      with:
        name: ${{ inputs.artifact-name }}
        path: |
          build/*.gz
          build/*.sha256
          build/*.zip
        retention-days: 1
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      if: inputs.upload-artifacts != '' && fromJSON(inputs.upload-artifacts)
      with:
        name: ${{ inputs.artifact-name }}_coverage
        path: |
          build/coverage-report
        retention-days: 1
