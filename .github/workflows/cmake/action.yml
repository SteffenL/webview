name: CMake build
description: Build project using CMake
inputs:
  artifacts-name:
    description: Artifacts name
    required: false
  build-dir:
    description: CMake build directory
    required: false
    default: build
  build-config-debug:
    description: CMake build config for debug
    required: false
    default: Debug
  build-config-release:
    description: CMake build config for release
    required: false
    default: Release
  build-config-profile:
    description: CMake build config for profiling
    required: false
    default: Profile
  coverage:
    description: Enable code coverage?
    required: false
  cmake-options:
    description: Sets extra CMake options in the form A=1 (one per line)
    required: false
  cxx-std:
    description: Sets CMAKE_CXX_STANDARD
    required: true
  docs:
    description: Build documentation
    required: false
  docs-target:
    description: CMake target for documentation
    required: false
  gcov:
    description: gcov executable
    required: false
    default: gcov
  gcovr-config:
    description: gcovr config file
    required: false
    default: gcovr.ci.cfg
  gcovr-version:
    description: gcovr version
    required: false
    default: '7.2'
  generator:
    description: CMake generator
    required: false
    default: Ninja
  generator-platform:
    description: Sets CMAKE_GENERATOR_PLATFORM
    required: false
  osx-deployment-target:
    description: Sets CMAKE_OSX_DEPLOYMENT_TARGET
    required: false
  package:
    description: Package?
    required: false
  package-source:
    description: Package source code?
    required: false
  shell:
    description: Shell
    required: false
    default: bash
  source-dir:
    description: CMake source directory
    required: false
    default: .
  test-wrapper-cmd:
    description: Test wrapper command
    required: false
  toolchain-file:
    description: CMake toolchain file
    required: false
runs:
  using: composite
  steps:
    - if: inputs.coverage != '' && fromJSON(inputs.coverage)
      name: gcov version
      run: ${{ inputs.gcov }} --version
      shell: ${{ inputs.shell }}

    - if: inputs.coverage != '' && fromJSON(inputs.coverage)
      name: Install gcovr
      run: pip install "gcovr==${{ inputs.gcovr-version }}"
      shell: ${{ inputs.shell }}

    - name: Generate build config names
      id: generate-build-config-names
      run: |
        configs=()
        if [[ "${{ inputs.coverage }}" == "true" ]]; then
          configs+=("${{ inputs.build-config-profile }}")
        else
          configs+=("${{ inputs.build-config-debug }}")
          configs+=("${{ inputs.build-config-release }}")
        fi
        echo "configs=${configs[@]}" >> "${GITHUB_OUTPUT}"
      shell: bash

    - name: Configure
      run: |
        cmake_cmd=(
          cmake
          -G "${{ inputs.generator }}"
          -B "${{ inputs.build-dir }}"
          -S "${{ inputs.source-dir }}"
        )
        if [[ ! -z "${{ inputs.cxx-std }}" ]]; then
          cmake_cmd+=(-D "CMAKE_CXX_STANDARD=${{ inputs.cxx-std }}")
        fi
        if [[ ! -z "${{ inputs.generator-platform }}" ]]; then
          cmake_cmd+=(-D "CMAKE_GENERATOR_PLATFORM=${{ inputs.generator-platform }}")
        fi
        if [[ ! -z "${{ inputs.osx-deployment-target }}" ]]; then
          cmake_cmd+=(-D "CMAKE_OSX_DEPLOYMENT_TARGET=${{ inputs.osx-deployment-target }}")
        fi
        if [[ ! -z "${{ inputs.toolchain-file }}" ]]; then
          cmake_cmd+=(-D "CMAKE_TOOLCHAIN_FILE=${{ inputs.toolchain-file }}")
        fi
        while read opt; do
          if [[ ! -z "${opt}" ]]; then
            cmake_cmd+=(-D "${opt}")
          fi
        done << EOF
        ${{ inputs.cmake-options }}
        EOF
        "${cmake_cmd[@]}"
      shell: ${{ inputs.shell }}

    - name: Build
      run: |
        configs=(${{ steps.generate-build-config-names.outputs.configs }})
        for config in "${configs[@]}"; do
          cmake_cmd=(
            cmake
            --build "${{ inputs.build-dir }}"
            --config "${config}"
          )
          "${cmake_cmd[@]}"
        done
      shell: ${{ inputs.shell }}

    - name: Test
      run: |
        configs=(${{ steps.generate-build-config-names.outputs.configs }})
        for config in "${configs[@]}"; do
          cmake_cmd=()
          if [[ ! -z "${{ inputs.test-wrapper-cmd }}" ]]; then
            cmake_cmd+=("${{ inputs.test-wrapper-cmd }}")
          fi
          cmake_cmd+=(
            ctest
            --test-dir "${{ inputs.build-dir }}"
            --output-on-failure
            --build-config "${config}"
          )
          "${cmake_cmd[@]}"
        done
      shell: ${{ inputs.shell }}

    - if: inputs.docs != '' && fromJSON(inputs.docs)
      name: Build documentation
      run: cmake --build "${{ inputs.build-dir }}" --target "${{ inputs.docs-target }}"
      shell: ${{ inputs.shell }}

    - if: inputs.package != '' && fromJSON(inputs.package)
      name: Create multi-config package
      run: cpack -C "Debug;Release" --config CPackConfig.cmake
      working-directory: ${{ inputs.build-dir }}
      shell: ${{ inputs.shell }}

    - if: inputs.package-source != '' && fromJSON(inputs.package-source)
      name: Create source package
      run: cpack --config CPackSourceConfig.cmake
      working-directory: ${{ inputs.build-dir }}
      shell: ${{ inputs.shell }}

    - if: inputs.coverage != '' && fromJSON(inputs.coverage)
      name: Generate coverage data
      id: prepare-coverage-artifacts
      run: |
        artifact_dir="temp_${RANDOM}/${{ inputs.artifacts-name }}"

        gcovr_args=(
          --config "${{ inputs.gcovr-config }}"
          --json "${artifact_dir}/coverage.json"
        )
        if [[ ! -z "${{ inputs.gcov }}" ]]; then
          gcovr_args+=(--gcov-executable "${{ inputs.gcov }}")
        fi

        mkdir -p "${artifact_dir}"
        gcovr "${gcovr_args[@]}"

        echo "upload-dir=${artifact_dir}" >> "${GITHUB_OUTPUT}"
      shell: ${{ inputs.shell }}

    # CPack produces checksum files with CRLF on Windows but the CR being present can cause
    # verification with shasum to fail on Unix-like systems.
    # find and grep were combined to work around incompatibilities between Linux and macOS.
    - if: (inputs.package != '' && fromJSON(inputs.package)) || (inputs.package-source != '' && fromJSON(inputs.package-source))
      name: Fix newlines in checksum files
      run: |
        while read f; do
          sed -i.bak 's/\\r\\n/\n/g' "${f}"
        done <<< "$(find . -type f -name "*.sha*" | grep -E '^.*\.sha[0-9]+$')"
      working-directory: ${{ inputs.build-dir }}
      shell: ${{ inputs.shell }}

    - if: inputs.package != '' && fromJSON(inputs.package)
      name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package_${{ inputs.artifacts-name }}
        path: |
          build/*.gz
          build/*.sha256
          build/*.zip
        retention-days: 1
        if-no-files-found: error

    - if: inputs.coverage != '' && fromJSON(inputs.coverage)
      name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test_coverage_data_${{ inputs.artifacts-name }}
        path: ${{ steps.prepare-coverage-artifacts.outputs.upload-dir }}
        retention-days: 1
        if-no-files-found: error

    - if: inputs.coverage != '' && fromJSON(inputs.coverage)
      name: Clean up temporary coverage files
      run: rm -rf "${{ steps.prepare-coverage-artifacts.outputs.upload-dir }}"
      shell: ${{ inputs.shell }}
