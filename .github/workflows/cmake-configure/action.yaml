name: CMake Configure
inputs:
  build-dir:
    required: true
    default: build
  source-dir:
    required: true
    default: .
  build-type:
    required: true
    default: Release
  generator:
    required: true
    default: Ninja
  shell:
    required: true
    default: bash
  cxx-std:
    required: false
  generator-platform:
    required: false
  toolchain-file:
    required: false
  macos-architectures:
    required: false
  require-failure:
    required: false
runs:
  using: "composite"
  steps:
    - name: Configure
      env:
        REQUIRE_FAILURE: ${{ inputs.require-failure }}
      run: |
        configure_args=("-DCMAKE_BUILD_TYPE=${{ inputs.build-type }}")
        if [[ ! -z "${{ inputs.cxx-std }}" ]]; then
          configure_args+=("-DCMAKE_CXX_STANDARD=${{ inputs.cxx-std }}")
        fi
        if [[ ! -z "${{ inputs.generator-platform }}" ]]; then
          configure_args+=("-DCMAKE_GENERATOR_PLATFORM=${{ inputs.generator-platform }}")
        fi
        if [[ ! -z "${{ inputs.toolchain-file }}" ]]; then
          configure_args+=("-DCMAKE_TOOLCHAIN_FILE=toolchains/${{ inputs.toolchain-file }}.cmake")
        fi
        if [[ ! -z "${{ inputs.macos-architectures }}" ]]; then
          configure_args+=("-DCMAKE_OSX_ARCHITECTURES=${{ inputs.macos-architectures }}")
        fi
        result=0
        cmake -G "${{ inputs.generator }}" -B "${{ inputs.build-dir }}" -S "${{ inputs.source-dir }}" "${configure_args[@]}" || result=1
        if [[ "${REQUIRE_FAILURE}" == "true" ]]; then
          if [[ "${result}" == "0" ]]; then
            echo Configuration succeeded but failure is required.
            exit 1
          fi
          exit 0
        fi
        exit "${result}"
      shell: ${{ inputs.shell }}
