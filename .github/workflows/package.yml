name: CI / Package
on:
  workflow_call:
    inputs:
      gcovr-version:
        type: string
        description: gcovr version
        required: false
        default: '7.2'
jobs:
  linux:
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        cxx-std: [20]
        image: [ubuntu-20.04, ubuntu-22.04]
        webkitgtk-api: ['4.0', '4.1', '6.0']
        exclude:
          - image: ubuntu-20.04
            webkitgtk-api: '6.0'
          - image: ubuntu-20.04
            webkitgtk-api: '4.1'
        include:
          # Compilers
          - image: ubuntu-22.04
            toolchain: llvm
            compiler-name: clang15
            cc: clang-15
            cxx: clang++-15
            apt: clang-15 clang++-15
          - image: ubuntu-22.04
            toolchain: gnu
            compiler-name: gcc12
            cc: gcc-12
            cxx: g++-12
            apt: gcc-12 g++-12
          - image: ubuntu-20.04
            toolchain: llvm
            compiler-name: clang12
            cc: clang-12
            cxx: clang++-12
            apt: clang-12 clang++-12
          - image: ubuntu-20.04
            toolchain: gnu
            compiler-name: gcc10
            cc: gcc-10
            cxx: g++-10
            apt: gcc-10 g++-10
          # WebKitGTK
          - webkitgtk-api: '6.0'
            apt-webkitgtk: libgtk-4-dev libwebkitgtk-6.0-dev
          - webkitgtk-api: '4.1'
            apt-webkitgtk: libgtk-3-dev libwebkit2gtk-4.1-dev
          - webkitgtk-api: '4.0'
            apt-webkitgtk: libgtk-3-dev libwebkit2gtk-4.0-dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/workflows/setup-env
        with:
          apt: ${{ matrix.apt }} ${{ matrix.apt-webkitgtk }}

      - name: Set up variables
        id: vars
        run: |
          echo "artifacts-name=${{ runner.os }}_${{ matrix.toolchain }}_${{ matrix.compiler-name }}_cxx${{ matrix.cxx-std }}_webkitgtk${{ matrix.webkitgtk-api }}" >> "${GITHUB_OUTPUT}"
          echo "build-dir=build" >> "${GITHUB_OUTPUT}"
          echo "generator=Ninja Multi-Config" >> "${GITHUB_OUTPUT}"
          echo "source-dir=." >> "${GITHUB_OUTPUT}"
          echo "test-wrapper-cmd=xvfb-run" >> "${GITHUB_OUTPUT}"

      - name: Configure
        run: >
          cmake
          -G "${{ steps.vars.outputs.generator }}"
          -B "${{ steps.vars.outputs.build-dir }}"
          -S "${{ steps.vars.outputs.source-dir }}"
          -D "CMAKE_C_COMPILER=${{ matrix.cc }}"
          -D "CMAKE_CXX_COMPILER=${{ matrix.cxx }}"
          -D "CMAKE_CXX_STANDARD=${{ matrix.cxx-std }}"

      - name: Build (Debug)
        run: >
          cmake
          --build "${{ steps.vars.outputs.build-dir }}"
          --config Debug

      - name: Build (Release)
        run: >
          cmake
          --build "${{ steps.vars.outputs.build-dir }}"
          --config Release

      - name: Test (Debug)
        run: >
          ${{ steps.vars.outputs.test-wrapper-cmd }}
          ctest
          --output-on-failure
          --build-config Debug
        working-directory: ${{ steps.vars.outputs.build-dir }}

      - name: Test (Release)
        run: >
          ${{ steps.vars.outputs.test-wrapper-cmd }}
          ctest
          --output-on-failure
          --build-config Release
        working-directory: ${{ steps.vars.outputs.build-dir }}

      - name: Create multi-config package
        run: cpack -C "Debug;Release" --config CPackConfig.cmake
        working-directory: ${{ steps.vars.outputs.build-dir }}

      - name: Create source package
        run: cpack --config CPackSourceConfig.cmake
        working-directory: ${{ steps.vars.outputs.build-dir }}

  macos:
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        cxx-std: [20]
        image: [ubuntu-14]
        include:
          # Compilers
          - toolchain: llvm
            compiler-name: clang
            cc: clang
            cxx: clang++
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/workflows/setup-env
        with:
          apt: ${{ matrix.apt }} ${{ matrix.apt-webkitgtk }}

      - name: Set up variables
        id: vars
        run: |
          echo "artifacts-name=${{ runner.os }}_${{ matrix.toolchain }}_${{ matrix.compiler-name }}_cxx${{ matrix.cxx-std }}" >> "${GITHUB_OUTPUT}"
          echo "build-dir=build" >> "${GITHUB_OUTPUT}"
          echo "generator=Xcode" >> "${GITHUB_OUTPUT}"
          echo "source-dir=." >> "${GITHUB_OUTPUT}"
          echo "test-wrapper-cmd=" >> "${GITHUB_OUTPUT}"

      - name: Configure
        run: >
          cmake
          -G "${{ steps.vars.outputs.generator }}"
          -B "${{ steps.vars.outputs.build-dir }}"
          -S "${{ steps.vars.outputs.source-dir }}"
          -D "CMAKE_C_COMPILER=${{ matrix.cc }}"
          -D "CMAKE_CXX_COMPILER=${{ matrix.cxx }}"
          -D "CMAKE_CXX_STANDARD=${{ matrix.cxx-std }}"

      - name: Build (Debug)
        run: >
          cmake
          --build "${{ steps.vars.outputs.build-dir }}"
          --config Debug

      - name: Build (Release)
        run: >
          cmake
          --build "${{ steps.vars.outputs.build-dir }}"
          --config Release

      - name: Test (Debug)
        run: >
          ${{ steps.vars.outputs.test-wrapper-cmd }}
          ctest
          --output-on-failure
          --build-config Debug
        working-directory: ${{ steps.vars.outputs.build-dir }}

      - name: Test (Release)
        run: >
          ${{ steps.vars.outputs.test-wrapper-cmd }}
          ctest
          --output-on-failure
          --build-config Release
        working-directory: ${{ steps.vars.outputs.build-dir }}

      - name: Create multi-config package
        run: cpack -C "Debug;Release" --config CPackConfig.cmake
        working-directory: ${{ steps.vars.outputs.build-dir }}

      - name: Create source package
        run: cpack --config CPackSourceConfig.cmake
        working-directory: ${{ steps.vars.outputs.build-dir }}
