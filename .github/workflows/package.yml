name: CI / Package
on:
  workflow_call:
jobs:
  package:
#    name: ${{ matrix.os }} (c++${{ matrix.cxx-std }}, ${{ matrix.toolchain }}, ${{ matrix.compiler-name }}, ${{ matrix.image }}, webkitgtk${{ matrix.webkitgtk-api }})
#    name: macos (c++${{ matrix.cxx-std }}, ${{ matrix.toolchain }}, ${{ matrix.compiler-name }}, ${{ matrix.image }})
#    name: windows-msvc (c++${{ matrix.cxx-std }}, ${{ matrix.toolchain }}, ${{ matrix.compiler-name }}, ${{ matrix.generator-platform }})
#    name: windows-msys2 (c++${{ matrix.cxx-std }}, ${{ matrix.toolchain }}, ${{ matrix.compiler-name }}, ${{ matrix.msys }})
    name: ${{ matrix.os }} (c++${{ matrix.cxx-std }}, ${{ matrix.tc }}, ${{ matrix.cn }}, ${{ matrix.i }}${{ matrix.name-suffix }})
    runs-on: ${{ matrix.i }}
    strategy:
      matrix:
        include:
          # cn:  compiler-name
          # i:   image
          # g:   generator
          # gp:  generator-platform
          # sh:  shell
          # tc:  toolchain
          - { os: linux,   i: ubuntu-22.04, cxx-std: 20, tc: gnu,                cn: gcc12, cc: gcc-12, cxx: g++-12,  g: Ninja Multi-Config,    sh: bash,        name-suffix: ', webkitgtk6.0', test-wrapper-cmd: xvfb-run, apt: gcc-12 g++-12, webkitgtk-api: '6.0', package-source: true }
          - { os: linux,   i: ubuntu-22.04, cxx-std: 20, tc: gnu,                cn: gcc12, cc: gcc-12, cxx: g++-12,  g: Ninja Multi-Config,    sh: bash,        name-suffix: ', webkitgtk4.1', test-wrapper-cmd: xvfb-run, apt: gcc-12 g++-12, webkitgtk-api: '4.1' }
          - { os: linux,   i: ubuntu-22.04, cxx-std: 20, tc: gnu,                cn: gcc12, cc: gcc-12, cxx: g++-12,  g: Ninja Multi-Config,    sh: bash,        name-suffix: ', webkitgtk4.0', test-wrapper-cmd: xvfb-run, apt: gcc-12 g++-12, webkitgtk-api: '4.0' }
          - { os: linux,   i: ubuntu-20.04, cxx-std: 20, tc: gnu,                cn: gcc10, cc: gcc-10, cxx: g++-10,  g: Ninja Multi-Config,    sh: bash,        name-suffix: ', webkitgtk4.0', test-wrapper-cmd: xvfb-run, apt: gcc-10 g++-10, webkitgtk-api: '4.0' }
          - { os: macos,   i: macos-14,     cxx-std: 20, tc: llvm,               cn: clang, cc: clang,  cxx: clang++, g: Xcode,                 sh: bash,        name-suffix: '',              osx-deployment-target: '10.9' }
          - { os: windows, i: windows-2022, cxx-std: 20, tc: vs2022,             cn: msvc,  cc: cl,     cxx: cl,      g: Visual Studio 17 2022, sh: bash,        name-suffix: ', ARM64',        gp: ARM64 }
          - { os: windows, i: windows-2022, cxx-std: 20, tc: vs2022,             cn: msvc,  cc: cl,     cxx: cl,      g: Visual Studio 17 2022, sh: bash,        name-suffix: ', x64',          gp: x64 }
          - { os: windows, i: windows-2022, cxx-std: 20, tc: vs2022,             cn: msvc,  cc: cl,     cxx: cl,      g: Visual Studio 17 2022, sh: bash,        name-suffix: ', Win32',        gp: Win32 }
          - { os: windows, i: windows-2022, cxx-std: 20, tc: msys2-gnu-ucrt64,   cn: gcc,   cc: gcc,    cxx: g++,     g: Ninja Multi-Config,    sh: 'msys2 {0}', name-suffix: ', UCRT64',       msys: UCRT64 }
          - { os: windows, i: windows-2022, cxx-std: 20, tc: msys2-llvm-clang64, cn: clang, cc: clang,  cxx: clang++, g: Ninja Multi-Config,    sh: 'msys2 {0}', name-suffix: ', CLANG64',      msys: CLANG64 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/workflows/setup-env
        with:
          apt: ${{ matrix.apt }}
          msys: ${{ matrix.msys }}
          webkitgtk-api: ${{ matrix.webkitgtk-api }}

      - name: Generate artifacts name
        id: generate-artifacts-name
        run: |
          if [[ "${{ matrix.os }}" == "linux" ]]; then
            name="${{ runner.os }}_${{ matrix.tc }}_${{ matrix.cn }}_cxx${{ matrix.cxx-std }}_webkitgtk${{ matrix.webkitgtk-api }}"
          elif [[ "${{ matrix.os }}" == "macos" ]]; then
            name="${{ runner.os }}_${{ matrix.tc }}_${{ matrix.cn }}_cxx${{ matrix.cxx-std }}"
          elif [[ "${{ matrix.os }}" == "windows" && "${{ matrix.cn }}" == "msvc" ]]; then
            name="${{ runner.os }}_${{ matrix.tc }}_${{ matrix.cn }}_cxx${{ matrix.cxx-std }}_${{ matrix.gp }}"
          elif [[ "${{ matrix.os }}" == "windows" && ! -z "${{ matrix.msys }}" ]]; then
            name="${{ runner.os }}_${{ matrix.tc }}_${{ matrix.cn }}_cxx${{ matrix.cxx-std }}_${{ matrix.msys }}"
          fi
          echo "artifacts-name=${name}" >> "${GITHUB_OUTPUT}"
        shell: bash

      - name: Build
        uses: ./.github/workflows/cmake/build
        with:
          artifacts-name: ${{ steps.generate-artifacts-name.outputs.artifacts-name }}
          build-dir: build
          cc: ${{ matrix.cc }}
          cxx: ${{ matrix.cxx }}
          cxx-std: ${{ matrix.cxx-std }}
          generator: ${{ matrix.g }}
          generator-platform: ${{ matrix.gp }}
          osx-deployment-target: ${{ matrix.osx-deployment-target }}
          package-source: ${{ matrix.package-source }}
          shell: ${{ matrix.sh }}
          source-dir: .
          test-wrapper-cmd: ${{ matrix.test-wrapper-cmd }}

  merge-package-artifacts:
    needs: package
    runs-on: ubuntu-22.04
    steps:
      - name: Merge package artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: package
          pattern: package_*
          delete-merged: true

  api-docs:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install doxygen
        run: sudo apt-get install -y doxygen

      - name: Prepare output directory
        run: mkdir -p build/docs

      - name: Run doxygen
        run: doxygen

      - name: Create package (tar.gz)
        run: tar -czvf docs.tar.gz docs
        working-directory: build

      - name: Create package (zip)
        run: zip -r9 docs.zip docs
        working-directory: build

      - name: Generate checksum files
        run: |
          while read f; do
            shasum --algorithm 256 "${f}" > "${f}.sha256"
          done << EOF
          $(find . -maxdepth 1 -type f -name '*.gz' -or -name '*.zip')
          EOF
        working-directory: build

      - name: Upload distributable artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            build/*.gz
            build/*.sha256
            build/*.zip
          retention-days: 1
          if-no-files-found: error
