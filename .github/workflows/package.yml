name: CI / Package
on:
  workflow_call:
jobs:
  package:
#    name: ${{ matrix.os }} (c++${{ matrix.cxx-std }}, ${{ matrix.toolchain }}, ${{ matrix.compiler-name }}, ${{ matrix.image }}, webkitgtk${{ matrix.webkitgtk-api }})
#    name: macos (c++${{ matrix.cxx-std }}, ${{ matrix.toolchain }}, ${{ matrix.compiler-name }}, ${{ matrix.image }})
#    name: windows-msvc (c++${{ matrix.cxx-std }}, ${{ matrix.toolchain }}, ${{ matrix.compiler-name }}, ${{ matrix.generator-platform }})
#    name: windows-msys2 (c++${{ matrix.cxx-std }}, ${{ matrix.toolchain }}, ${{ matrix.compiler-name }}, ${{ matrix.msys }})
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - { os: linux,   image: ubuntu-22.04, cxx-std: 20, toolchain: gnu,                compiler-name: gcc12, cc: gcc-12, cxx: g++-12,  gen: Ninja Multi-Config,    shell: bash,        test-wrapper-cmd: xvfb-run, apt: gcc-12 g++-12, webkitgtk-api: '6.0', package-source: true }
          - { os: linux,   image: ubuntu-22.04, cxx-std: 20, toolchain: gnu,                compiler-name: gcc12, cc: gcc-12, cxx: g++-12,  gen: Ninja Multi-Config,    shell: bash,        test-wrapper-cmd: xvfb-run, apt: gcc-12 g++-12, webkitgtk-api: '4.1' }
          - { os: linux,   image: ubuntu-22.04, cxx-std: 20, toolchain: gnu,                compiler-name: gcc12, cc: gcc-12, cxx: g++-12,  gen: Ninja Multi-Config,    shell: bash,        test-wrapper-cmd: xvfb-run, apt: gcc-12 g++-12, webkitgtk-api: '4.0' }
          - { os: linux,   image: ubuntu-20.04, cxx-std: 20, toolchain: gnu,                compiler-name: gcc10, cc: gcc-10, cxx: g++-10,  gen: Ninja Multi-Config,    shell: bash,        test-wrapper-cmd: xvfb-run, apt: gcc-10 g++-10, webkitgtk-api: '4.0' }
          - { os: macos,   image: macos-14,     cxx-std: 20, toolchain: llvm,               compiler-name: clang, cc: clang,  cxx: clang++, gen: Xcode,                 shell: bash,        osx-deployment-target: '10.9' }
          - { os: windows, image: windows-2022, cxx-std: 20, toolchain: vs,                 compiler-name: msvc,  cc: cl,     cxx: cl,      gen: Visual Studio 17 2022, shell: bash,        gen-platform: ARM64 }
          - { os: windows, image: windows-2022, cxx-std: 20, toolchain: vs,                 compiler-name: msvc,  cc: cl,     cxx: cl,      gen: Visual Studio 17 2022, shell: bash,        gen-platform: x64 }
          - { os: windows, image: windows-2022, cxx-std: 20, toolchain: vs,                 compiler-name: msvc,  cc: cl,     cxx: cl,      gen: Visual Studio 17 2022, shell: bash,        gen-platform: Win32 }
          - { os: windows, image: windows-2022, cxx-std: 20, toolchain: msys2-gnu-ucrt64,   compiler-name: gcc,   cc: gcc,    cxx: g++,     gen: Ninja Multi-Config,    shell: 'msys2 {0}', msys: UCRT64 }
          - { os: windows, image: windows-2022, cxx-std: 20, toolchain: msys2-llvm-clang64, compiler-name: clang, cc: clang,  cxx: clang++, gen: Ninja Multi-Config,    shell: 'msys2 {0}', msys: CLANG64 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/workflows/setup-env
        with:
          apt: ${{ matrix.apt }}
          msys: ${{ matrix.msys }}
          webkitgtk-api: ${{ matrix.webkitgtk-api }}

      - if: runner.os == 'Linux'
        name: Generate artifacts name
        id: generate-artifacts-name
        run: |
          if [[ "${{ matrix.os }}" == "linux" ]]; then
            echo "artifacts-name=${{ runner.os }}_${{ matrix.toolchain }}_${{ matrix.compiler-name }}_cxx${{ matrix.cxx-std }}_webkitgtk${{ matrix.webkitgtk-api }}" >> "${GITHUB_OUTPUT}"
          elif [[ "${{ matrix.os }}" == "macos" ]]; then
            echo "artifacts-name=${{ runner.os }}_${{ matrix.toolchain }}_${{ matrix.compiler-name }}_cxx${{ matrix.cxx-std }}" >> "${GITHUB_OUTPUT}"
          elif [[ "${{ matrix.os }}" == "windows" && "${{ matrix.toolchain }}" == "vs" ]]; then
            echo "artifacts-name=${{ runner.os }}_${{ matrix.toolchain }}_${{ matrix.compiler-name }}_cxx${{ matrix.cxx-std }}_${{ matrix.generator-platform }}" >> "${GITHUB_OUTPUT}"
          elif [[ "${{ matrix.os }}" == "windows" && ! -z "${{ matrix.msys }}" == "" ]]; then
            echo "artifacts-name=${{ runner.os }}_${{ matrix.toolchain }}_${{ matrix.compiler-name }}_cxx${{ matrix.cxx-std }}_${{ matrix.msys }}" >> "${GITHUB_OUTPUT}"
          fi

      - name: Build
        uses: ./.github/workflows/cmake/build
        with:
          artifacts-name: ${{ steps.generate-artifacts-name.outputs.artifacts-name }}
          build-dir: build
          cc: ${{ matrix.cc }}
          cxx: ${{ matrix.cxx }}
          cxx-std: ${{ matrix.cxx-std }}
          generator: ${{ matrix.gen }}
          generator-platform: ${{ matrix.gen-platform }}
          msys: ${{ matrix.msys }}
          osx-deployment-target: ${{ matrix.osx-deployment-target }}
          package-source: ${{ matrix.package-source }}
          shell: ${{ matrix.shell }}
          source-dir: .
          test-wrapper-cmd: ${{ matrix.test-wrapper-cmd }}

#  merge-package-artifacts:
#    needs:
#      - linux
#      - macos
#      - windows-msvc
#      - windows-msys2
#    runs-on: ubuntu-22.04
#    steps:
#      - name: Merge package artifacts
#        uses: actions/upload-artifact/merge@v4
#        with:
#          name: package
#          pattern: package_*
#          delete-merged: true
#
#  api-docs:
#    runs-on: ubuntu-22.04
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install doxygen
#        run: sudo apt-get install -y doxygen
#
#      - name: Prepare output directory
#        run: mkdir -p build/docs
#
#      - name: Run doxygen
#        run: doxygen
#
#      - name: Create package (tar.gz)
#        run: tar -czvf docs.tar.gz docs
#        working-directory: build
#
#      - name: Create package (zip)
#        run: zip -r9 docs.zip docs
#        working-directory: build
#
#      - name: Generate checksum files
#        run: |
#          while read f; do
#            shasum --algorithm 256 "${f}" > "${f}.sha256"
#          done << EOF
#          $(find . -maxdepth 1 -type f -name '*.gz' -or -name '*.zip')
#          EOF
#        working-directory: build
#
#      - name: Upload distributable artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: docs
#          path: |
#            build/*.gz
#            build/*.sha256
#            build/*.zip
#          retention-days: 1
#          if-no-files-found: error
#