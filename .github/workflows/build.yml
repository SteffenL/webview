name: CI / Package
on:
  workflow_call:
    inputs:
      gcovr-version:
        type: string
        description: gcovr version
        required: false
        default: '7.2'
jobs:
  load-matrix:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.load-matrix.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load matrix file
        id: load-matrix
        uses: actions/github-script@v7
        with:
          script: |
            const csv = require("./.github/workflows/csv.js");
            const path = require("node:path");
            const transform = v => { "TRUE": true, "FALSE": false }[v] || v;
            return { include: csv.loadFile(path.join(".github", "workflows", "build_matrix.csv"), transform) };

  build:
    needs: load-matrix
    name: ${{ matrix.job-type }} (${{ matrix.os }}, c++${{ matrix.cxx-std }}, ${{ matrix.arch }}, ${{ matrix.toolchain }}${{ matrix.toolchain-executable-suffix }}${{ matrix.job-name-suffix }})
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.load-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/workflows/setup-env
        with:
          apt: ${{ matrix.apt }}
          msys: ${{ matrix.msys }}
          msys-pacboy: ${{ matrix.msys-pacboy }}
          webkitgtk-api: ${{ matrix.webkitgtk-api }}

      - name: Build artifacts name
        uses: actions/github-script@v7
        id: artifacts-name
        env:
          OS: ${{ matrix.os }}
          IMAGE: ${{ matrix.image }}
          ARCH: ${{ matrix.arch }}
          CXX_STD: ${{ matrix.cxx-std }}
          TOOLCHAIN: ${{ matrix.toolchain }}
          TOOLCHAIN_EXECUTABLE_SUFFIX: ${{ matrix.toolchain-executable-suffix }}
          WEBKITGTK_API: ${{ matrix.webkitgtk-api }}
          MSVC_MT: ${{ matrix.msvc-mt }}
        with:
          script: |
            return [
              process.env.OS,
              process.env.IMAGE,
              process.env.ARCH,
              process.env.CXX_STD,
              process.env.TOOLCHAIN,
              process.env.TOOLCHAIN_EXECUTABLE_SUFFIX,
              process.env.WEBKITGTK_API,
              process.env.MSVC_MT,
            ].filter(v => v !== undefined && v !== "").join("_")
          result-encoding: string

      - name: Build CMake options
        uses: actions/github-script@v7
        id: cmake-options
        env:
          ARCH: ${{ matrix.arch }}
          CHECKS: ${{ matrix.checks }}
          DOCS: ${{ matrix.docs }}
          CXX_STD: ${{ matrix.cxx-std }}
          OSX_DEPLOYMENT_TARGET: ${{ matrix.osx-deployment-target }}
          TOOLCHAIN: ${{ matrix.toolchain }}
          TOOLCHAIN_EXECUTABLE_SUFFIX: ${{ matrix.toolchain-executable-suffix }}
          MSVC_MT: ${{ matrix.msvc-mt }}
        with:
          script: |
            const option = (k, v, t) => v === undefined ? undefined : [k, ({
                Boolean: () => [1, "1", "true", "TRUE", true].includes(v) ? "ON" : "OFF"
              }[t ? t.name : undefined] || (() => v))()
            ].join("=");
            return [
              option("CMAKE_CXX_STANDARD", process.env.CXX_STD),
              option("CMAKE_OSX_DEPLOYMENT_TARGET", process.env.OSX_DEPLOYMENT_TARGET),
              option("CMAKE_TOOLCHAIN_FILE", `cmake/toolchains/${process.env.ARCH}-${process.env.TOOLCHAIN}.cmake`),
              option("WEBVIEW_BUILD_DOCS", process.env.DOCS, Boolean),
              option("WEBVIEW_INSTALL_DOCS", process.env.DOCS, Boolean),
              option("WEBVIEW_TOOLCHAIN_EXECUTABLE_SUFFIX", process.env.TOOLCHAIN_EXECUTABLE_SUFFIX),
              option("WEBVIEW_USE_STATIC_MSVC_RUNTIME", process.env.MSVC_MT, Boolean),
              option("WEBVIEW_ENABLE_CHECKS", process.env.CHECKS, Boolean),
            ].filter(v => v !== undefined).filter(v => {
              console.log(v);
              return true;
            });

      - name: CMake
        uses: ./.github/workflows/cmake
        with:
          artifacts-name: ${{ steps.artifacts-name.outputs.result }}
          build-dir: build
          docs: ${{ matrix.docs }}
          docs-target: webview_docs
          cmake-options: ${{ steps.cmake-options.outputs.result }}
          generator: ${{ matrix.generator }}
          shell: ${{ matrix.shell }}
          source-dir: .
          test-wrapper-cmd: ${{ matrix.test-wrapper-cmd }}
          # Specific to code coverage
          coverage: ${{ matrix.job-type == 'coverage' }}
          gcov: ${{ matrix.gcov }}
          gcovr-version: ${{ inputs.gcovr-version }}

  merge-package-artifacts:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Merge package artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: package
          pattern: package_*
          delete-merged: true

  coverage-report:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        run: >
          sudo apt-get install --no-install-recommends -y
          python3
          python3-lxml
          python3-markupsafe
          python3-pip

      - name: Install gcovr
        run: pip install "gcovr==${{ inputs.gcovr-version }}"

      - name: Merge test coverage artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: test_coverage_data
          pattern: test_coverage_data_*
          delete-merged: true
          retention-days: 1
          separate-directories: true

      - name: Download merged test coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: test_coverage_data

      - name: Generate report
        id: generate-report
        run: |
          tracefile_args=()
          while read f; do
            tracefile_args+=(--add-tracefile "${f}")
          done <<< "$(find . -type f -name "coverage.json")"

          artifact_dir="temp_${RANDOM}/report"
          mkdir -p "${artifact_dir}/html"

          gcovr --config gcovr.ci.cfg --json "${artifact_dir}/gcovr.json" "${tracefile_args[@]}"
          gcovr --config gcovr.ci.cfg --coveralls "${artifact_dir}/coveralls.json" --add-tracefile "${artifact_dir}/gcovr.json"
          gcovr --config gcovr.ci.cfg --json-summary "${artifact_dir}/summary.json" --add-tracefile "${artifact_dir}/gcovr.json"
          gcovr --config gcovr.ci.cfg --html-details "${artifact_dir}/html/index.html" --add-tracefile "${artifact_dir}/gcovr.json"

          echo "upload-dir=${artifact_dir}" >> "${GITHUB_OUTPUT}"

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test_coverage_report
          path: ${{ steps.generate-report.outputs.upload-dir }}
          retention-days: 1
          if-no-files-found: error

      - name: Add report to CI job summary
        uses: actions/github-script@v7
        with:
          script: |
            const numberOr = (value, alternative) => Number.isNaN(value = parseInt(value)) ? alternative : value;
            const percentValue = (value, percentSymbol = "%") => numberOr(value, "-") + percentSymbol;
            const data = require("./${{ steps.generate-report.outputs.upload-dir }}/summary.json");
            await core.summary
              .addHeading("Test Coverage Summary")
              .addTable([
                [
                  { data: "Lines", header: true },
                  { data: "Functions", header: true },
                  { data: "Branches", header: true }
                ],
                [
                  `${percentValue(data.line_percent)} ${data.line_covered}/${data.line_total}`,
                  `${percentValue(data.function_percent)} ${data.function_covered}/${data.function_total}`,
                  `${percentValue(data.branch_percent)} ${data.branch_covered}/${data.branch_total}`
                ]
              ])
              .addTable([
                [
                  { data: "File", header: true },
                  { data: "Lines", header: true },
                  { data: "Functions", header: true },
                  { data: "Branches", header: true }
                ],
                ...data.files.map(file => [
                  file.filename,
                  `${percentValue(file.line_percent)} ${file.line_covered}/${file.line_total}`,
                  `${percentValue(file.function_percent)} ${file.function_covered}/${file.function_total}`,
                  `${percentValue(file.branch_percent)} ${file.branch_covered}/${file.branch_total}`
                ])
              ])
              .write();
