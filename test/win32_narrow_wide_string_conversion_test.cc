// +build ignore

#include "webview.h"

#include <cassert>
#include <cstdint>

// =================================================================
// TEST: ensure that narrow/wide string conversion works on Windows.
// =================================================================
int win32_narrow_wide_string_conversion_test(int, char *[]) {
  using namespace webview::detail;
  assert(widen_string("") == L"");
  assert(narrow_string(L"") == "");
  assert(widen_string("foo") == L"foo");
  assert(narrow_string(L"foo") == "foo");
  assert(widen_string("ãƒ•ãƒ¼") == L"ãƒ•ãƒ¼");
  assert(narrow_string(L"ãƒ•ãƒ¼") == "ãƒ•ãƒ¼");
  assert(widen_string("Ã¦Ã¸Ã¥") == L"Ã¦Ã¸Ã¥");
  assert(narrow_string(L"Ã¦Ã¸Ã¥") == "Ã¦Ã¸Ã¥");
  // Unicode number for the smiley face below: U+1F600
  assert(widen_string("ðŸ˜€") == L"ðŸ˜€");
  assert(narrow_string(L"ðŸ˜€") == "ðŸ˜€");
  // Ensure that elements of wide string are correct
  {
    auto s = widen_string("ðŸ˜€");
    assert(s.size() == 2);
    assert(static_cast<std::uint16_t>(s[0]) == 0xD83D);
    assert(static_cast<std::uint16_t>(s[1]) == 0xDE00);
  }
  // Ensure that elements of narrow string are correct
  {
    auto s = narrow_string(L"ðŸ˜€");
    assert(s.size() == 4);
    assert(static_cast<std::uint8_t>(s[0]) == 0xf0);
    assert(static_cast<std::uint8_t>(s[1]) == 0x9f);
    assert(static_cast<std::uint8_t>(s[2]) == 0x98);
    assert(static_cast<std::uint8_t>(s[3]) == 0x80);
  }
  // Null-characters must also be converted
  assert(widen_string(std::string(2, '\0')) == std::wstring(2, L'\0'));
  assert(narrow_string(std::wstring(2, L'\0')) == std::string(2, '\0'));
  return 0;
}
